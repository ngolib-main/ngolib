{"ast":null,"code":"import _objectSpread from\"/home/javi/Server/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/*\r\n *  -- Admin.js --\r\n *\r\n *\r\n *\r\n */import*as React from'react';import{useEffect,useRef,useState}from\"react\";import Header from\"../reusable/Header\";import{displayedSectionsAdmin}from\"../profile/displaySections\";import styles from\"../../style/page/profile.module.css\";import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function Admin(){const[openSections,setOpenSections]=useState([]);const[PersonalInfo,setPersonalInfo]=useState(null);const fileInputRef=useRef(null);const[newTag,setNewTag]=useState('');useEffect(()=>{const fetchProfile=async()=>{try{const response=await fetch(\"/api/profile\",{method:\"GET\",credentials:\"include\",headers:{\"Content-Type\":\"application/json\"}});const data=await response.json();console.log(data);setPersonalInfo(data);}catch(error){alert(\"Something went wrong, try again later\");}};fetchProfile();},[]);const handlePhotoClick=()=>{fileInputRef.current.click();};const handleFileChange=e=>{const file=e.target.files[0];if(!file){return alert(\"Wrong file â€” try again\");}// Use FileReader to get Base64\nconst reader=new FileReader();reader.onload=async()=>{const imageBase64=reader.result;try{const res=await fetch(\"/api/profile/image\",{method:\"POST\",credentials:\"include\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({imageBase64})});if(!res.ok){const err=await res.json().catch(()=>({}));throw new Error(err.message||\"Upload failed\");}const data=await res.json();console.log(\"Upload successful:\",data);alert(\"Upload successful\");setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{image:imageBase64}));}catch(error){console.error(\"Error uploading image:\",error);alert(\"Error uploading image: \"+error.message);}};reader.readAsDataURL(file);};const toggleSection=index=>{setOpenSections(prev=>prev.includes(index)?prev.filter(i=>i!==index):[...prev,index]);};// Add this function to handle adding a new tag\nconst handleAddTag=async()=>{if(newTag.trim()){try{// API call to add a tag\nconst response=await fetch(\"/api/admin/tag\",{method:\"POST\",credentials:\"include\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({tag:newTag})});const data=await response.json();if(response.ok){// Update local state to show the new tag\nsetPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{tags:[[...prev.tags[0],_objectSpread({tag:newTag},data)]]}));// Clear the input\nsetNewTag('');// Success alert\nalert(\"Tag \\\"\".concat(newTag,\"\\\" has been successfully added!\"));// Force a re-render of the accordion by adding a small delay\nsetTimeout(()=>{// This will trigger a re-render and potentially fix the accordion sizing\nsetPersonalInfo(prev=>_objectSpread({},prev));// Alternatively, you could dispatch a window resize event\nwindow.dispatchEvent(new Event('resize'));},100);// Log the admin action\ntry{// Assuming admin_id and ngo_id are available in your component\n// You might need to adjust this based on your actual data structure\nconst adminActionResponse=await fetch('/api/admin/actions',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({ngo_id:null,// Assuming this is available in your state\nadmin_id:PersonalInfo.adminId,// Assuming this is available in your state\naction_type:'tag_added',action_details:\"New tag with name \".concat(newTag,\" was added\")})});if(!adminActionResponse.ok){console.error('Failed to log admin action');}}catch(actionErr){console.error('Error logging admin action:',actionErr);// Not alerting the user about this error since the main operation succeeded\n}}else{// Handle specific error cases\nif(response.status===409){alert(\"Error: Tag \\\"\".concat(newTag,\"\\\" already exists.\"));}else{alert(\"Error: \".concat(data.message||\"Failed to add tag. Please try again.\"));}}}catch(err){console.error(err);alert(\"Error adding tag\");}}};// Function to change the status of a subscription (active/canceled)\n/* const handleStatusChange = async (subscriptionId, currentStatus, ngoId) => {\r\n         const newStatus = currentStatus === 'active' ? 'canceled' : 'active';\r\n\r\n         // Add confirmation dialog\r\n         const confirmAction = window.confirm(\r\n             `Are you sure you want to change this subscription status from \"${currentStatus}\" to \"${newStatus}\"?`\r\n         );\r\n\r\n         // Only proceed if the user confirms\r\n         if (!confirmAction) {\r\n             return; // Exit the function if user cancels\r\n         }\r\n\r\n         try {\r\n             const response = await fetch(`/api/admin/subscriptions/${subscriptionId}/status`, {\r\n                 method: \"PUT\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n                 body: JSON.stringify({ status: newStatus }),\r\n             });\r\n\r\n             if (response.ok) {\r\n                 // Update only that subscription's status locally\r\n                 setPersonalInfo(prev => {\r\n                     const updatedSubs = prev.allSubscriptions.map(sub =>\r\n                         sub.subscription_id === subscriptionId ? { ...sub, status: newStatus } : sub\r\n                     );\r\n                     return { ...prev, allSubscriptions: updatedSubs };\r\n                 });\r\n\r\n                 // Log the admin action\r\n                 try {\r\n                     // Assuming admin_id and ngo_id are available in your component\r\n                     // You might need to adjust this based on your actual data structure\r\n                     const adminActionResponse = await fetch('/api/admin/actions', {\r\n                         method: 'POST',\r\n                         headers: { 'Content-Type': 'application/json' },\r\n                         body: JSON.stringify({\r\n                             ngo_id: ngoId, // Assuming this is available in your state\r\n                             admin_id: PersonalInfo.adminId, // Assuming this is available in your state\r\n                             action_type: 'subscription_status_change',\r\n                             action_details: `Changed subscription ${subscriptionId} status from ${currentStatus} to ${newStatus}`\r\n                         })\r\n                     });\r\n\r\n                     if (!adminActionResponse.ok) {\r\n                         console.error('Failed to log admin action');\r\n                     }\r\n                 } catch (actionErr) {\r\n                     console.error('Error logging admin action:', actionErr);\r\n                     // Not alerting the user about this error since the main operation succeeded\r\n                 }\r\n\r\n             } else {\r\n                 alert(\"Failed to update subscription status\");\r\n             }\r\n         } catch (err) {\r\n             console.error(err);\r\n             alert(\"Error updating status\");\r\n         }\r\n     };*/// Modified handleStatusChange function for the filtered list scenario\nconst handleStatusChange=async(subscriptionId,currentStatus,ngoId)=>{const newStatus=currentStatus==='active'?'canceled':'active';// Add confirmation dialog\nconst confirmAction=window.confirm(\"Are you sure you want to change this subscription status from \\\"\".concat(currentStatus,\"\\\" to \\\"\").concat(newStatus,\"\\\"?\"));// Only proceed if the user confirms\nif(!confirmAction){return;// Exit the function if user cancels\n}try{const response=await fetch(\"/api/admin/subscriptions/\".concat(subscriptionId,\"/status\"),{method:\"PUT\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({status:newStatus})});if(response.ok){// Update state to reflect the status change in both original and filtered lists\nsetPersonalInfo(prev=>{// Update in the original allSubscriptions array\nconst updatedSubs=prev.allSubscriptions.map(sub=>sub.subscription_id===subscriptionId?_objectSpread(_objectSpread({},sub),{},{status:newStatus}):sub);// If we have a filtered list, update it too\nlet updatedFiltered=prev.filteredSubscriptions;if(prev.isFiltered&&prev.filteredSubscriptions){updatedFiltered=prev.filteredSubscriptions.map(sub=>sub.subscription_id===subscriptionId?_objectSpread(_objectSpread({},sub),{},{status:newStatus}):sub);}return _objectSpread(_objectSpread({},prev),{},{allSubscriptions:updatedSubs,filteredSubscriptions:updatedFiltered});});// Log the admin action\ntry{const adminActionResponse=await fetch('/api/admin/actions',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({ngo_id:ngoId,admin_id:PersonalInfo.adminId,action_type:'subscription_status_change',action_details:\"Changed subscription \".concat(subscriptionId,\" status from \").concat(currentStatus,\" to \").concat(newStatus)})});if(!adminActionResponse.ok){console.error('Failed to log admin action');}}catch(actionErr){console.error('Error logging admin action:',actionErr);}}else{alert(\"Failed to update subscription status\");}}catch(err){console.error(err);alert(\"Error updating status\");}};const handleReportDonation=async donation_id=>{};const handleRedirectVerification=async ngo_id=>{try{// Create a hidden form and submit it for a proper POST navigation\nconst form=document.createElement('form');form.method='POST';form.action='/admin/verify-NGOs';const hiddenField=document.createElement('input');hiddenField.type='hidden';hiddenField.name='ngo_id';hiddenField.value=ngo_id;form.appendChild(hiddenField);document.body.appendChild(form);form.submit();}catch(err){console.error(\"Error redirecting to verification:\",err);alert(\"Error navigating to verification page. Please try again.\");}};const handleRemoveTag=async(tag_id,tag_name)=>{// Add confirmation dialog\nconst confirmAction=window.confirm(\"Are you sure you want to delete this tag?\");// Only proceed if the user confirms\nif(!confirmAction){return;// Exit the function if user cancels\n}try{const response=await fetch(\"/api/admin/delete-tag\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({tag_id:tag_id})});const data=await response.json();if(response.ok){// Force a complete refresh of profile data\n// NOTE: Use this as a last resource if the stupid list of tags is not updating  after removal\n/*\r\n                try {\r\n                    const profileResponse = await fetch(\"/api/profile\", {\r\n                        method: \"GET\",\r\n                        credentials: \"include\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                        },\r\n                    });\r\n\r\n                    if (profileResponse.ok) {\r\n                        const updatedData = await profileResponse.json();\r\n                        setPersonalInfo(updatedData);\r\n                        console.log(\"Profile data refreshed after tag deletion\");\r\n                    } else {\r\n                        console.error(\"Failed to refresh profile data\");\r\n                    }\r\n\r\n                } catch (refreshError) {\r\n                    console.error(\"Error refreshing data:\", refreshError);\r\n                }*/// If deletion was successful, manually update the UI\n// Force a full component refresh by creating a new copy of PersonalInfo\nconst updatedTags=[...PersonalInfo.tags];// Filter out the deleted tag\nif(Array.isArray(updatedTags[0])){updatedTags[0]=updatedTags[0].filter(tag=>{// Try to accommodate different ID field names\nconst tagIdentifier=tag.id||tag._id||tag.tag_id;return tagIdentifier!==tag_id;});}console.log(\"Tags after filtering:\",updatedTags);// Create a completely new copy of the state to ensure React detects changes\nconst newPersonalInfo=_objectSpread(_objectSpread({},PersonalInfo),{},{tags:updatedTags});console.log(\"New PersonalInfo:\",newPersonalInfo);// Update the state with the new object\nsetPersonalInfo(newPersonalInfo);// Success alert\nalert(\"Tag has been successfully deleted!\");// Log the admin action if you want to track this\ntry{await fetch('/api/admin/actions',{method:'POST',headers:{'Content-Type':'application/json'},credentials:\"include\",body:JSON.stringify({admin_id:PersonalInfo.adminId,action_type:'tag_deleted',action_details:\"Deleted tag with ID \".concat(tag_id,\", and name \").concat(tag_name)})});}catch(actionErr){console.error('Error logging admin action:',actionErr);// Not alerting the user about this error since the main operation succeeded\n}}else{// Handle specific error cases\nif(response.status===409){alert(\"Cannot delete this tag as it is currently in use by one or more NGOs.\");}else if(response.status===404){alert(\"Tag not found. It may have been already deleted.\");// Still update the UI to remove it if it was somehow still in the UI\nsetPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{tags:[prev.tags[0].filter(tag=>tag.id!==tag_id)]}));}else{alert(\"Error: \".concat(data.message||\"Failed to delete tag.\"));}}}catch(err){console.error(\"Error deleting tag:\",err);alert(\"Network error: Could not connect to the server. Please check your connection and try again.\");}};if(!PersonalInfo){return/*#__PURE__*/_jsxs(\"div\",{className:styles.loadingWrapper,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.spinner}),/*#__PURE__*/_jsx(\"p\",{className:styles.loadingText,children:\"Loading profile data...\"})]});}const user=PersonalInfo.user||{};const displayedSections=displayedSectionsAdmin;const subscriptions=PersonalInfo.allSubscriptions||[];const donations=PersonalInfo.allDonations||[];const actions=PersonalInfo.actions||[];const tags=PersonalInfo.tags[0]||[];const verifications=PersonalInfo.verifications||[];const renderPersonalInfo=()=>{return/*#__PURE__*/_jsxs(\"div\",{className:styles.info,children:[/*#__PURE__*/_jsx(\"h2\",{children:user.username||\"Unnamed admin\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Email: \",user.email||\"No email provided\"]}),openSections.includes(0)&&/*#__PURE__*/_jsxs(\"div\",{className:styles.tagInputContainer,children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Subscriptions filters\"}),/*#__PURE__*/_jsxs(\"div\",{className:styles.filterRow,children:[\"Filter by NGO:\",/*#__PURE__*/_jsxs(\"select\",{value:PersonalInfo.selectedNgo||'',onChange:e=>setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{selectedNgo:e.target.value})),className:styles.Select,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select NGO\"}),[...new Map(subscriptions.map(sub=>[sub.ngo_id,sub])).values()].sort((a,b)=>a.ngo_name.localeCompare(b.ngo_name)).map(sub=>/*#__PURE__*/_jsx(\"option\",{value:sub.ngo_id,children:sub.ngo_name},sub.ngo_id))]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:styles.filterButton,onClick:()=>{// Log selected value for debugging\nconsole.log(\"Selected NGO ID:\",PersonalInfo.selectedNgo);console.log(\"All subscriptions:\",subscriptions);if(PersonalInfo.selectedNgo){// Show only subscriptions for the selected NGO\nconst filtered=subscriptions.filter(sub=>String(sub.ngo_id)===String(PersonalInfo.selectedNgo));console.log(\"Filtered subscriptions:\",filtered);setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{filteredSubscriptions:filtered,subscriptionsFiltered:true}));}else{// If no NGO selected or \"Select NGO\" is chosen, show all\nsetPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{filteredSubscriptions:subscriptions,subscriptionsFiltered:false}));}},children:\"Filter\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.filterRow,children:[\"Filter by user:\",/*#__PURE__*/_jsxs(\"select\",{value:PersonalInfo.selectedUser||'',onChange:e=>setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{selectedUser:e.target.value})),className:styles.Select,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select user\"}),[...new Map(subscriptions.map(sub=>[sub.user_id,sub])).values()].sort((a,b)=>String(a.user_id).localeCompare(String(b.user_id))).map(sub=>/*#__PURE__*/_jsx(\"option\",{value:sub.user_id,children:sub.user_id},sub.user_id))]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:styles.filterButton,onClick:()=>{// Always start with the original subscription list for user filtering\nlet filtered=[...subscriptions];if(PersonalInfo.selectedUser){// Filter by selected user_id\nfiltered=filtered.filter(sub=>String(sub.user_id)===String(PersonalInfo.selectedUser));// Re-apply other filters if they were active\nif(PersonalInfo.minAmount){filtered=filtered.filter(sub=>parseFloat(sub.amount)>=parseFloat(PersonalInfo.minAmount));}if(PersonalInfo.maxAmount){filtered=filtered.filter(sub=>parseFloat(sub.amount)<=parseFloat(PersonalInfo.maxAmount));}// Apply NGO filter if active\nif(PersonalInfo.selectedNgo){filtered=filtered.filter(sub=>String(sub.ngo_id)===String(PersonalInfo.selectedNgo));}setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{filteredSubscriptions:filtered,subscriptionsFiltered:true,userFilterApplied:true}));}else{// If no user is selected, apply other filters if they exist\nlet resetFiltered=[...subscriptions];// Re-apply other filters\nif(PersonalInfo.minAmount){resetFiltered=resetFiltered.filter(sub=>parseFloat(sub.amount)>=parseFloat(PersonalInfo.minAmount));}if(PersonalInfo.maxAmount){resetFiltered=resetFiltered.filter(sub=>parseFloat(sub.amount)<=parseFloat(PersonalInfo.maxAmount));}// Apply NGO filter if active\nif(PersonalInfo.selectedNgo){resetFiltered=resetFiltered.filter(sub=>String(sub.ngo_id)===String(PersonalInfo.selectedNgo));}const stillFiltered=PersonalInfo.minAmount||PersonalInfo.maxAmount||PersonalInfo.selectedNgo;setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{filteredSubscriptions:stillFiltered?resetFiltered:null,subscriptionsFiltered:!!stillFiltered,userFilterApplied:false}));}},children:\"Filter\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.filterRow,children:[\"Filter by value:\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",placeholder:\"Min amount\",value:PersonalInfo.minAmount||'',onChange:e=>setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{minAmount:e.target.value})),className:styles.amountInput}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",placeholder:\"Max amount\",value:PersonalInfo.maxAmount||'',onChange:e=>setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{maxAmount:e.target.value})),className:styles.amountInput}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:styles.filterButton,onClick:()=>{// Always start with the original subscriptions\nlet filtered=[...subscriptions];// Apply user filter if it's active\nif(PersonalInfo.selectedUser){filtered=filtered.filter(sub=>String(sub.user_id)===String(PersonalInfo.selectedUser));}// Apply NGO filter if it's active\nif(PersonalInfo.selectedNgo){filtered=filtered.filter(sub=>String(sub.ngo_id)===String(PersonalInfo.selectedNgo));}// Apply min amount filter if provided\nif(PersonalInfo.minAmount){const minValue=parseFloat(PersonalInfo.minAmount);filtered=filtered.filter(sub=>parseFloat(sub.amount)>=minValue);}// Apply max amount filter if provided\nif(PersonalInfo.maxAmount){const maxValue=parseFloat(PersonalInfo.maxAmount);filtered=filtered.filter(sub=>parseFloat(sub.amount)<=maxValue);}// Determine if any filter is applied\nconst isAnyFilterApplied=PersonalInfo.selectedUser||PersonalInfo.selectedNgo||PersonalInfo.minAmount||PersonalInfo.maxAmount;// Update state with filtered data\nsetPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{filteredSubscriptions:isAnyFilterApplied?filtered:null,subscriptionsFiltered:!!isAnyFilterApplied,amountFilterApplied:!!(PersonalInfo.minAmount||PersonalInfo.maxAmount)}));},children:\"Filter\"})]}),/*#__PURE__*/_jsx(\"div\",{className:styles.filterRow,children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:styles.cleanButton,onClick:()=>{// Reset all filters\nsetPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{selectedNgo:'',minAmount:'',maxAmount:'',filteredSubscriptions:null,subscriptionsFiltered:false,amountFilterApplied:false}));},children:\"Clean filters\"})})]}),openSections.includes(1)&&/*#__PURE__*/_jsxs(\"div\",{className:styles.tagInputContainer,children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Donations filters\"}),/*#__PURE__*/_jsxs(\"div\",{className:styles.filterRow,children:[\"Filter by NGO:\",/*#__PURE__*/_jsxs(\"select\",{value:PersonalInfo.selectedNgo||'',onChange:e=>setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{selectedNgo:e.target.value})),className:styles.Select,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select NGO\"}),[...new Map(donations.map(sub=>[sub.ngo_id,sub])).values()].sort((a,b)=>a.ngo_name.localeCompare(b.ngo_name)).map(sub=>/*#__PURE__*/_jsx(\"option\",{value:sub.ngo_id,children:sub.ngo_name},sub.ngo_id))]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:styles.filterButton,onClick:()=>{// Log selected value for debugging\nconsole.log(\"Selected NGO ID:\",PersonalInfo.selectedNgo);console.log(\"All donations:\",donations);if(PersonalInfo.selectedNgo){// Show only subscriptions for the selected NGO\nconst filtered=donations.filter(sub=>String(sub.ngo_id)===String(PersonalInfo.selectedNgo));console.log(\"Filtered donations:\",filtered);setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{filteredDonations:filtered,donationsFiltered:true}));}else{// If no NGO selected or \"Select NGO\" is chosen, show all\nsetPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{filteredDonations:donations,donationsFiltered:false}));}},children:\"Filter\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.filterRow,children:[\"Filter by user:\",/*#__PURE__*/_jsxs(\"select\",{value:PersonalInfo.selectedUser||'',onChange:e=>setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{selectedUser:e.target.value})),className:styles.Select,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select user\"}),[...new Map(donations.map(sub=>[sub.user_id,sub])).values()].sort((a,b)=>String(a.user_id).localeCompare(String(b.user_id))).map(sub=>/*#__PURE__*/_jsx(\"option\",{value:sub.user_id,children:sub.user_id},sub.user_id))]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:styles.filterButton,onClick:()=>{// Always start with the original subscription list for user filtering\nlet filtered=[...donations];if(PersonalInfo.selectedUser){// Filter by selected user_id\nfiltered=filtered.filter(sub=>String(sub.user_id)===String(PersonalInfo.selectedUser));// Re-apply other filters if they were active\nif(PersonalInfo.minAmount){filtered=filtered.filter(sub=>parseFloat(sub.amount)>=parseFloat(PersonalInfo.minAmount));}if(PersonalInfo.maxAmount){filtered=filtered.filter(sub=>parseFloat(sub.amount)<=parseFloat(PersonalInfo.maxAmount));}// Apply NGO filter if active\nif(PersonalInfo.selectedNgo){filtered=filtered.filter(sub=>String(sub.ngo_id)===String(PersonalInfo.selectedNgo));}setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{filteredDonations:filtered,donationsFiltered:true,userFilterApplied:true}));}else{// If no user is selected, apply other filters if they exist\nlet resetFiltered=[...donations];// Re-apply other filters\nif(PersonalInfo.minAmount){resetFiltered=resetFiltered.filter(sub=>parseFloat(sub.amount)>=parseFloat(PersonalInfo.minAmount));}if(PersonalInfo.maxAmount){resetFiltered=resetFiltered.filter(sub=>parseFloat(sub.amount)<=parseFloat(PersonalInfo.maxAmount));}// Apply NGO filter if active\nif(PersonalInfo.selectedNgo){resetFiltered=resetFiltered.filter(sub=>String(sub.ngo_id)===String(PersonalInfo.selectedNgo));}const stillFiltered=PersonalInfo.minAmount||PersonalInfo.maxAmount||PersonalInfo.selectedNgo;setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{filteredDonations:stillFiltered?resetFiltered:null,donationsFiltered:!!stillFiltered,userFilterApplied:false}));}},children:\"Filter\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.filterRow,children:[\"Filter by value:\",/*#__PURE__*/_jsx(\"input\",{type:\"number\",placeholder:\"Min amount\",value:PersonalInfo.minAmount||'',onChange:e=>setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{minAmount:e.target.value})),className:styles.amountInput}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",placeholder:\"Max amount\",value:PersonalInfo.maxAmount||'',onChange:e=>setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{maxAmount:e.target.value})),className:styles.amountInput}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:styles.filterButton,onClick:()=>{// Always start with the original subscriptions\nlet filtered=[...donations];// Apply user filter if it's active\nif(PersonalInfo.selectedUser){filtered=filtered.filter(sub=>String(sub.user_id)===String(PersonalInfo.selectedUser));}// Apply NGO filter if it's active\nif(PersonalInfo.selectedNgo){filtered=filtered.filter(sub=>String(sub.ngo_id)===String(PersonalInfo.selectedNgo));}// Apply min amount filter if provided\nif(PersonalInfo.minAmount){const minValue=parseFloat(PersonalInfo.minAmount);filtered=filtered.filter(sub=>parseFloat(sub.amount)>=minValue);}// Apply max amount filter if provided\nif(PersonalInfo.maxAmount){const maxValue=parseFloat(PersonalInfo.maxAmount);filtered=filtered.filter(sub=>parseFloat(sub.amount)<=maxValue);}// Determine if any filter is applied\nconst isAnyFilterApplied=PersonalInfo.selectedUser||PersonalInfo.selectedNgo||PersonalInfo.minAmount||PersonalInfo.maxAmount;// Update state with filtered data\nsetPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{filteredDonations:isAnyFilterApplied?filtered:null,donationsFiltered:!!isAnyFilterApplied,amountFilterApplied:!!(PersonalInfo.minAmount||PersonalInfo.maxAmount)}));},children:\"Filter\"})]}),/*#__PURE__*/_jsx(\"div\",{className:styles.filterRow,children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:styles.cleanButton,onClick:()=>{// Reset all filters\nsetPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{selectedNgo:'',minAmount:'',maxAmount:'',filteredDonations:null,donationsFiltered:false,amountFilterApplied:false}));},children:\"Clean filters\"})})]}),openSections.includes(2)&&/*#__PURE__*/_jsx(\"div\",{className:styles.tagInputContainer,children:/*#__PURE__*/_jsx(\"h4\",{children:\"Verifications filters\"})}),openSections.includes(3)&&/*#__PURE__*/_jsxs(\"div\",{className:styles.tagInputContainer,children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Tags options\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:newTag,onChange:e=>setNewTag(e.target.value),placeholder:\"Enter new tag\",className:styles.tagInput}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:styles.addTagButton,onClick:handleAddTag,disabled:!newTag.trim(),children:\"Add Tag\"})]}),openSections.includes(4)&&/*#__PURE__*/_jsxs(\"div\",{className:styles.tagInputContainer,children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Actions filters\"}),/*#__PURE__*/_jsxs(\"div\",{className:styles.filterRow,children:[\"Filter by action type:\",/*#__PURE__*/_jsxs(\"select\",{value:PersonalInfo.selectedAction||'',onChange:e=>setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{selectedAction:e.target.value})),className:styles.Select,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"Select action type\"}),[...new Map(actions.map(action=>[action.action_type,action])).values()].sort((a,b)=>String(a.action_type).localeCompare(String(b.action_type))).map(action=>/*#__PURE__*/_jsx(\"option\",{value:action.action_type,children:action.action_type},action.action_type))]}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:styles.filterButton,onClick:()=>{// Log selected value for debugging\nconsole.log(\"Selected NGO ID:\",PersonalInfo.selectedAction);console.log(\"All actions:\",actions);if(PersonalInfo.selectedAction){// Show only subscriptions for the selected NGO\nconst filtered=actions.filter(sub=>String(sub.action_type)===String(PersonalInfo.selectedAction));console.log(\"Filtered actions:\",filtered);setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{filteredActions:filtered,actionsFiltered:true}));}else{// If no NGO selected or \"Select NGO\" is chosen, show all\nsetPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{filteredActions:actions,actionsFiltered:false}));}},children:\"Filter\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.filterRow,children:[\"Filter by date:\",/*#__PURE__*/_jsx(\"input\",{type:\"date\",placeholder:\"Begin date\",value:PersonalInfo.beginDate||'',onChange:e=>setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{beginDate:e.target.value})),className:styles.amountInput}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",placeholder:\"End date\",value:PersonalInfo.endDate||'',onChange:e=>setPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{endDate:e.target.value})),className:styles.amountInput}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:styles.filterButton,onClick:()=>{// Always start with the original actions\nlet filtered=[...actions];// Apply action type filter if it's active\nif(PersonalInfo.selectedAction){filtered=filtered.filter(sub=>String(sub.action_type)===String(PersonalInfo.selectedAction));}// Apply begin date filter if provided\nif(PersonalInfo.beginDate){const beginDateObj=new Date(PersonalInfo.beginDate);filtered=filtered.filter(sub=>{const actionDate=new Date(sub.action_date);return actionDate>=beginDateObj;});}// Apply end date filter if provided\nif(PersonalInfo.endDate){const endDateObj=new Date(PersonalInfo.endDate);// Add one day to include the end date fully\nendDateObj.setDate(endDateObj.getDate()+1);filtered=filtered.filter(sub=>{const actionDate=new Date(sub.action_date);return actionDate<endDateObj;});}// Determine if any filter is applied\nconst isAnyFilterApplied=PersonalInfo.selectedAction||PersonalInfo.beginDate||PersonalInfo.endDate;// Update state with filtered data\nsetPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{filteredActions:isAnyFilterApplied?filtered:null,actionsFiltered:!!isAnyFilterApplied,// Fixed typo: acitonsFiltered â†’ actionsFiltered\ndateFilterApplied:!!(PersonalInfo.beginDate||PersonalInfo.endDate)// Changed from amountFilterApplied to dateFilterApplied for clarity\n}));},children:\"Filter\"})]}),/*#__PURE__*/_jsx(\"div\",{className:styles.filterRow,children:/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:styles.cleanButton,onClick:()=>{// Reset all filters\nsetPersonalInfo(prev=>_objectSpread(_objectSpread({},prev),{},{selectedAction:'',beginDate:'',endDate:'',filteredAction:null,actionsFiltered:false,amountFilterApplied:false}));},children:\"Clean filters\"})})]})]});};return/*#__PURE__*/_jsxs(\"div\",{className:styles.page,children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsxs(\"div\",{className:styles.profileWrapper,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.leftSideBar,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.photoSection,children:[/*#__PURE__*/_jsx(\"img\",{className:styles.profilePic,src:PersonalInfo.image||\"ngo_icon.png\",alt:\"Your image\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",ref:fileInputRef,onChange:handleFileChange,style:{display:\"none\"},accept:\"image/*\"}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:styles.uploadButton,onClick:handlePhotoClick,children:\"Add picture\"})]}),/*#__PURE__*/_jsx(\"div\",{className:styles.informationContainer,children:renderPersonalInfo()})]}),/*#__PURE__*/_jsx(\"div\",{className:styles.rightSideBar,children:displayedSections.map((section,index)=>{let data=[];if(index===0)data=PersonalInfo.subscriptionsFiltered?PersonalInfo.filteredSubscriptions:subscriptions;if(index===1)data=PersonalInfo.donationsFiltered?PersonalInfo.filteredDonations:donations;if(index===2)data=verifications;if(index===3)data=tags;if(index===4)data=PersonalInfo.actionsFiltered?PersonalInfo.filteredActions:actions;return/*#__PURE__*/_jsxs(\"div\",{className:styles.accordionSection,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.accordionTitle,onClick:()=>toggleSection(index),children:section.title}),/*#__PURE__*/_jsx(\"div\",{className:\"\".concat(styles.accordionContent,\" \").concat(openSections.includes(index)?styles.open:\"\"),children:/*#__PURE__*/_jsx(\"ul\",{children:data.length>0?data.map((item,i)=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"strong\",{children:item.ngo_name||item.username||item.name||item.tag||item.action_details+\" on \"+item.action_date||\"Unnamed\"})}),index===4&&/*#__PURE__*/_jsx(\"div\",{children:\"NGO (id) affected:\"+item.ngo_id}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'0.85rem',fontWeight:'bold',color:item.status==='active'?'green':'red'},children:item.status||\"\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"span\",{children:item.amount!=null?\"\".concat(item.amount,\" \\u20AC\"):''}),index===4&&/*#__PURE__*/_jsx(\"div\",{className:styles.adminDisplay,children:/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{children:\"Admin (id): \"+item.admin_id}),/*#__PURE__*/_jsx(\"div\",{children:\"Action id: \"+item.action_id})]})}),index===0&&/*#__PURE__*/_jsx(\"button\",{className:styles.itemButton,onClick:()=>handleStatusChange(item.subscription_id,item.status,item.ngo_id),children:item.status==='active'?'Cancel':'Activate'}),index===1&&/*#__PURE__*/_jsx(\"button\",{className:styles.itemButton,onClick:()=>handleReportDonation(item.subscription_id,item.status),children:'Report'}),index===2&&/*#__PURE__*/_jsx(\"button\",{className:styles.itemButton,onClick:()=>handleRedirectVerification(item.ngo_id),children:'To verification'}),index===3&&/*#__PURE__*/_jsx(\"button\",{className:styles.itemButton,onClick:()=>handleRemoveTag(item.tag_id,item.tag),children:'Remove'})]})]},i)):/*#__PURE__*/_jsx(\"li\",{children:\"Nothing yet\"})})})]},index);})})]}),/*#__PURE__*/_jsx(\"footer\",{})]});}export default Admin;","map":{"version":3,"names":["React","useEffect","useRef","useState","Header","displayedSectionsAdmin","styles","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Admin","openSections","setOpenSections","PersonalInfo","setPersonalInfo","fileInputRef","newTag","setNewTag","fetchProfile","response","fetch","method","credentials","headers","data","json","console","log","error","alert","handlePhotoClick","current","click","handleFileChange","e","file","target","files","reader","FileReader","onload","imageBase64","result","res","body","JSON","stringify","ok","err","catch","Error","message","prev","_objectSpread","image","readAsDataURL","toggleSection","index","includes","filter","i","handleAddTag","trim","tag","tags","concat","setTimeout","window","dispatchEvent","Event","adminActionResponse","ngo_id","admin_id","adminId","action_type","action_details","actionErr","status","handleStatusChange","subscriptionId","currentStatus","ngoId","newStatus","confirmAction","confirm","updatedSubs","allSubscriptions","map","sub","subscription_id","updatedFiltered","filteredSubscriptions","isFiltered","handleReportDonation","donation_id","handleRedirectVerification","form","document","createElement","action","hiddenField","type","name","value","appendChild","submit","handleRemoveTag","tag_id","tag_name","updatedTags","Array","isArray","tagIdentifier","id","_id","newPersonalInfo","className","loadingWrapper","children","spinner","loadingText","user","displayedSections","subscriptions","donations","allDonations","actions","verifications","renderPersonalInfo","info","username","email","tagInputContainer","filterRow","selectedNgo","onChange","Select","Map","values","sort","a","b","ngo_name","localeCompare","filterButton","onClick","filtered","String","subscriptionsFiltered","selectedUser","user_id","minAmount","parseFloat","amount","maxAmount","userFilterApplied","resetFiltered","stillFiltered","placeholder","amountInput","minValue","maxValue","isAnyFilterApplied","amountFilterApplied","cleanButton","filteredDonations","donationsFiltered","tagInput","addTagButton","disabled","selectedAction","filteredActions","actionsFiltered","beginDate","endDate","beginDateObj","Date","actionDate","action_date","endDateObj","setDate","getDate","dateFilterApplied","filteredAction","page","profileWrapper","leftSideBar","photoSection","profilePic","src","alt","ref","style","display","accept","uploadButton","informationContainer","rightSideBar","section","accordionSection","accordionTitle","title","accordionContent","open","length","item","fontSize","fontWeight","color","adminDisplay","action_id","itemButton"],"sources":["/home/javi/Server/src/components/account/Admin.js"],"sourcesContent":["/*\r\n *  -- Admin.js --\r\n *\r\n *\r\n *\r\n */\r\n\r\nimport * as React from 'react';\r\nimport {useEffect, useRef, useState} from \"react\";\r\nimport Header from \"../reusable/Header\";\r\nimport {displayedSectionsAdmin} from \"../profile/displaySections\";\r\nimport styles from \"../../style/page/profile.module.css\";\r\n\r\nfunction Admin() {\r\n    const [openSections, setOpenSections] = useState([]);\r\n    const [PersonalInfo, setPersonalInfo] = useState(null);\r\n    const fileInputRef = useRef(null);\r\n    const [newTag, setNewTag] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchProfile = async () => {\r\n            try {\r\n                const response = await fetch(\"/api/profile\", {\r\n                    method: \"GET\",\r\n                    credentials: \"include\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                });\r\n                const data = await response.json();\r\n                console.log(data)\r\n                setPersonalInfo(data);\r\n            } catch (error) {\r\n                alert(\"Something went wrong, try again later\")\r\n            }\r\n        };\r\n        fetchProfile();\r\n    }, []);\r\n\r\n    const handlePhotoClick = () => {\r\n        fileInputRef.current.click();\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if (!file) {\r\n            return alert(\"Wrong file â€” try again\");\r\n        }\r\n\r\n        // Use FileReader to get Base64\r\n        const reader = new FileReader();\r\n        reader.onload = async () => {\r\n            const imageBase64 = reader.result;\r\n\r\n            try {\r\n                const res = await fetch(\"/api/profile/image\", {\r\n                    method: \"POST\",\r\n                    credentials: \"include\",\r\n                    headers: {\"Content-Type\": \"application/json\"},\r\n                    body: JSON.stringify({imageBase64}),\r\n                });\r\n\r\n                if (!res.ok) {\r\n                    const err = await res.json().catch(() => ({}));\r\n                    throw new Error(err.message || \"Upload failed\");\r\n                }\r\n\r\n                const data = await res.json();\r\n                console.log(\"Upload successful:\", data);\r\n                alert(\"Upload successful\");\r\n                setPersonalInfo(prev => ({\r\n                    ...prev,\r\n                    image: imageBase64\r\n                }));\r\n            } catch (error) {\r\n                console.error(\"Error uploading image:\", error);\r\n                alert(\"Error uploading image: \" + error.message);\r\n            }\r\n        };\r\n\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const toggleSection = (index) => {\r\n        setOpenSections((prev) =>\r\n            prev.includes(index)\r\n                ? prev.filter((i) => i !== index)\r\n                : [...prev, index]\r\n        );\r\n    };\r\n\r\n    // Add this function to handle adding a new tag\r\n    const handleAddTag = async () => {\r\n        if (newTag.trim()) {\r\n            try {\r\n                // API call to add a tag\r\n                const response = await fetch(\"/api/admin/tag\", {\r\n                    method: \"POST\",\r\n                    credentials: \"include\",\r\n                    headers: {\"Content-Type\": \"application/json\"},\r\n                    body: JSON.stringify({tag: newTag}),\r\n                });\r\n                const data = await response.json();\r\n\r\n                if (response.ok) {\r\n\r\n                    // Update local state to show the new tag\r\n                    setPersonalInfo(prev => ({\r\n                        ...prev,\r\n                        tags: [\r\n                            [...prev.tags[0], {tag: newTag, ...data}]\r\n                        ]\r\n                    }));\r\n\r\n                    // Clear the input\r\n                    setNewTag('');\r\n\r\n                    // Success alert\r\n                    alert(`Tag \"${newTag}\" has been successfully added!`);\r\n\r\n                    // Force a re-render of the accordion by adding a small delay\r\n                    setTimeout(() => {\r\n                        // This will trigger a re-render and potentially fix the accordion sizing\r\n                        setPersonalInfo(prev => ({...prev}));\r\n\r\n                        // Alternatively, you could dispatch a window resize event\r\n                        window.dispatchEvent(new Event('resize'));\r\n                    }, 100);\r\n\r\n                    // Log the admin action\r\n                    try {\r\n                        // Assuming admin_id and ngo_id are available in your component\r\n                        // You might need to adjust this based on your actual data structure\r\n                        const adminActionResponse = await fetch('/api/admin/actions', {\r\n                            method: 'POST',\r\n                            headers: {'Content-Type': 'application/json'},\r\n                            body: JSON.stringify({\r\n                                ngo_id: null, // Assuming this is available in your state\r\n                                admin_id: PersonalInfo.adminId, // Assuming this is available in your state\r\n                                action_type: 'tag_added',\r\n                                action_details: `New tag with name ${newTag} was added`\r\n                            })\r\n                        });\r\n\r\n                        if (!adminActionResponse.ok) {\r\n                            console.error('Failed to log admin action');\r\n                        }\r\n                    } catch (actionErr) {\r\n                        console.error('Error logging admin action:', actionErr);\r\n                        // Not alerting the user about this error since the main operation succeeded\r\n                    }\r\n                } else {\r\n                    // Handle specific error cases\r\n                    if (response.status === 409) {\r\n                        alert(`Error: Tag \"${newTag}\" already exists.`);\r\n                    } else {\r\n                        alert(`Error: ${data.message || \"Failed to add tag. Please try again.\"}`);\r\n                    }\r\n                }\r\n\r\n            } catch (err) {\r\n                console.error(err);\r\n                alert(\"Error adding tag\");\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    // Function to change the status of a subscription (active/canceled)\r\n    /* const handleStatusChange = async (subscriptionId, currentStatus, ngoId) => {\r\n         const newStatus = currentStatus === 'active' ? 'canceled' : 'active';\r\n\r\n         // Add confirmation dialog\r\n         const confirmAction = window.confirm(\r\n             `Are you sure you want to change this subscription status from \"${currentStatus}\" to \"${newStatus}\"?`\r\n         );\r\n\r\n         // Only proceed if the user confirms\r\n         if (!confirmAction) {\r\n             return; // Exit the function if user cancels\r\n         }\r\n\r\n         try {\r\n             const response = await fetch(`/api/admin/subscriptions/${subscriptionId}/status`, {\r\n                 method: \"PUT\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n                 body: JSON.stringify({ status: newStatus }),\r\n             });\r\n\r\n             if (response.ok) {\r\n                 // Update only that subscription's status locally\r\n                 setPersonalInfo(prev => {\r\n                     const updatedSubs = prev.allSubscriptions.map(sub =>\r\n                         sub.subscription_id === subscriptionId ? { ...sub, status: newStatus } : sub\r\n                     );\r\n                     return { ...prev, allSubscriptions: updatedSubs };\r\n                 });\r\n\r\n                 // Log the admin action\r\n                 try {\r\n                     // Assuming admin_id and ngo_id are available in your component\r\n                     // You might need to adjust this based on your actual data structure\r\n                     const adminActionResponse = await fetch('/api/admin/actions', {\r\n                         method: 'POST',\r\n                         headers: { 'Content-Type': 'application/json' },\r\n                         body: JSON.stringify({\r\n                             ngo_id: ngoId, // Assuming this is available in your state\r\n                             admin_id: PersonalInfo.adminId, // Assuming this is available in your state\r\n                             action_type: 'subscription_status_change',\r\n                             action_details: `Changed subscription ${subscriptionId} status from ${currentStatus} to ${newStatus}`\r\n                         })\r\n                     });\r\n\r\n                     if (!adminActionResponse.ok) {\r\n                         console.error('Failed to log admin action');\r\n                     }\r\n                 } catch (actionErr) {\r\n                     console.error('Error logging admin action:', actionErr);\r\n                     // Not alerting the user about this error since the main operation succeeded\r\n                 }\r\n\r\n             } else {\r\n                 alert(\"Failed to update subscription status\");\r\n             }\r\n         } catch (err) {\r\n             console.error(err);\r\n             alert(\"Error updating status\");\r\n         }\r\n     };*/\r\n\r\n    // Modified handleStatusChange function for the filtered list scenario\r\n    const handleStatusChange = async (subscriptionId, currentStatus, ngoId) => {\r\n        const newStatus = currentStatus === 'active' ? 'canceled' : 'active';\r\n\r\n        // Add confirmation dialog\r\n        const confirmAction = window.confirm(\r\n            `Are you sure you want to change this subscription status from \"${currentStatus}\" to \"${newStatus}\"?`\r\n        );\r\n\r\n        // Only proceed if the user confirms\r\n        if (!confirmAction) {\r\n            return; // Exit the function if user cancels\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`/api/admin/subscriptions/${subscriptionId}/status`, {\r\n                method: \"PUT\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({status: newStatus}),\r\n            });\r\n\r\n            if (response.ok) {\r\n                // Update state to reflect the status change in both original and filtered lists\r\n                setPersonalInfo(prev => {\r\n                    // Update in the original allSubscriptions array\r\n                    const updatedSubs = prev.allSubscriptions.map(sub =>\r\n                        sub.subscription_id === subscriptionId ? {...sub, status: newStatus} : sub\r\n                    );\r\n\r\n                    // If we have a filtered list, update it too\r\n                    let updatedFiltered = prev.filteredSubscriptions;\r\n                    if (prev.isFiltered && prev.filteredSubscriptions) {\r\n                        updatedFiltered = prev.filteredSubscriptions.map(sub =>\r\n                            sub.subscription_id === subscriptionId ? {...sub, status: newStatus} : sub\r\n                        );\r\n                    }\r\n\r\n                    return {\r\n                        ...prev,\r\n                        allSubscriptions: updatedSubs,\r\n                        filteredSubscriptions: updatedFiltered\r\n                    };\r\n                });\r\n\r\n                // Log the admin action\r\n                try {\r\n                    const adminActionResponse = await fetch('/api/admin/actions', {\r\n                        method: 'POST',\r\n                        headers: {'Content-Type': 'application/json'},\r\n                        body: JSON.stringify({\r\n                            ngo_id: ngoId,\r\n                            admin_id: PersonalInfo.adminId,\r\n                            action_type: 'subscription_status_change',\r\n                            action_details: `Changed subscription ${subscriptionId} status from ${currentStatus} to ${newStatus}`\r\n                        })\r\n                    });\r\n\r\n                    if (!adminActionResponse.ok) {\r\n                        console.error('Failed to log admin action');\r\n                    }\r\n                } catch (actionErr) {\r\n                    console.error('Error logging admin action:', actionErr);\r\n                }\r\n\r\n            } else {\r\n                alert(\"Failed to update subscription status\");\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n            alert(\"Error updating status\");\r\n        }\r\n    };\r\n\r\n    const handleReportDonation = async (donation_id) => {\r\n\r\n    }\r\n\r\n\r\n    const handleRedirectVerification = async (ngo_id) => {\r\n        try {\r\n            // Create a hidden form and submit it for a proper POST navigation\r\n            const form = document.createElement('form');\r\n            form.method = 'POST';\r\n            form.action = '/admin/verify-NGOs';\r\n\r\n            const hiddenField = document.createElement('input');\r\n            hiddenField.type = 'hidden';\r\n            hiddenField.name = 'ngo_id';\r\n            hiddenField.value = ngo_id;\r\n\r\n            form.appendChild(hiddenField);\r\n            document.body.appendChild(form);\r\n            form.submit();\r\n        } catch (err) {\r\n            console.error(\"Error redirecting to verification:\", err);\r\n            alert(\"Error navigating to verification page. Please try again.\");\r\n        }\r\n    };\r\n\r\n\r\n    const handleRemoveTag = async (tag_id, tag_name) => {\r\n        // Add confirmation dialog\r\n        const confirmAction = window.confirm(\r\n            \"Are you sure you want to delete this tag?\"\r\n        );\r\n\r\n        // Only proceed if the user confirms\r\n        if (!confirmAction) {\r\n            return; // Exit the function if user cancels\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`/api/admin/delete-tag`, {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({tag_id: tag_id}),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n\r\n                // Force a complete refresh of profile data\r\n                // NOTE: Use this as a last resource if the stupid list of tags is not updating  after removal\r\n                /*\r\n                try {\r\n                    const profileResponse = await fetch(\"/api/profile\", {\r\n                        method: \"GET\",\r\n                        credentials: \"include\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                        },\r\n                    });\r\n\r\n                    if (profileResponse.ok) {\r\n                        const updatedData = await profileResponse.json();\r\n                        setPersonalInfo(updatedData);\r\n                        console.log(\"Profile data refreshed after tag deletion\");\r\n                    } else {\r\n                        console.error(\"Failed to refresh profile data\");\r\n                    }\r\n\r\n                } catch (refreshError) {\r\n                    console.error(\"Error refreshing data:\", refreshError);\r\n                }*/\r\n\r\n                // If deletion was successful, manually update the UI\r\n                // Force a full component refresh by creating a new copy of PersonalInfo\r\n                const updatedTags = [...PersonalInfo.tags];\r\n\r\n                // Filter out the deleted tag\r\n                if (Array.isArray(updatedTags[0])) {\r\n                    updatedTags[0] = updatedTags[0].filter(tag => {\r\n                        // Try to accommodate different ID field names\r\n                        const tagIdentifier = tag.id || tag._id || tag.tag_id;\r\n                        return tagIdentifier !== tag_id;\r\n                    });\r\n                }\r\n\r\n                console.log(\"Tags after filtering:\", updatedTags);\r\n\r\n                // Create a completely new copy of the state to ensure React detects changes\r\n                const newPersonalInfo = {\r\n                    ...PersonalInfo,\r\n                    tags: updatedTags\r\n                };\r\n\r\n                console.log(\"New PersonalInfo:\", newPersonalInfo);\r\n\r\n                // Update the state with the new object\r\n                setPersonalInfo(newPersonalInfo);\r\n\r\n\r\n                // Success alert\r\n                alert(\"Tag has been successfully deleted!\");\r\n\r\n                // Log the admin action if you want to track this\r\n                try {\r\n                    await fetch('/api/admin/actions', {\r\n                        method: 'POST',\r\n                        headers: {'Content-Type': 'application/json'},\r\n                        credentials: \"include\",\r\n                        body: JSON.stringify({\r\n                            admin_id: PersonalInfo.adminId,\r\n                            action_type: 'tag_deleted',\r\n                            action_details: `Deleted tag with ID ${tag_id}, and name ${tag_name}`\r\n                        })\r\n                    });\r\n\r\n\r\n                } catch (actionErr) {\r\n                    console.error('Error logging admin action:', actionErr);\r\n                    // Not alerting the user about this error since the main operation succeeded\r\n                }\r\n            } else {\r\n                // Handle specific error cases\r\n                if (response.status === 409) {\r\n                    alert(\"Cannot delete this tag as it is currently in use by one or more NGOs.\");\r\n                } else if (response.status === 404) {\r\n                    alert(\"Tag not found. It may have been already deleted.\");\r\n\r\n                    // Still update the UI to remove it if it was somehow still in the UI\r\n                    setPersonalInfo(prev => ({\r\n                        ...prev,\r\n                        tags: [\r\n                            prev.tags[0].filter(tag => tag.id !== tag_id)\r\n                        ]\r\n                    }));\r\n                } else {\r\n                    alert(`Error: ${data.message || \"Failed to delete tag.\"}`);\r\n                }\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error deleting tag:\", err);\r\n            alert(\"Network error: Could not connect to the server. Please check your connection and try again.\");\r\n        }\r\n\r\n    };\r\n\r\n\r\n    if (!PersonalInfo) {\r\n        return (\r\n            <div className={styles.loadingWrapper}>\r\n                <div className={styles.spinner}></div>\r\n                <p className={styles.loadingText}>Loading profile data...</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const user = PersonalInfo.user || {};\r\n    const displayedSections = displayedSectionsAdmin;\r\n    const subscriptions = PersonalInfo.allSubscriptions || [];\r\n    const donations = PersonalInfo.allDonations || [];\r\n    const actions = PersonalInfo.actions || [];\r\n    const tags = PersonalInfo.tags[0] || [];\r\n    const verifications = PersonalInfo.verifications || [];\r\n\r\n    const renderPersonalInfo = () => {\r\n        return (\r\n            <div className={styles.info}>\r\n                <h2>{user.username || \"Unnamed admin\"}</h2>\r\n                <p>Email: {user.email || \"No email provided\"}</p>\r\n\r\n                {/* SUBSCRIPTIONS CONTROLS */}\r\n                {/* Only show tag input and button when subscriptions section (index 0) is open */}\r\n                {openSections.includes(0) && (\r\n                    <div className={styles.tagInputContainer}>\r\n                        <h4>Subscriptions filters</h4>\r\n                        {/* First row */}\r\n                        <div className={styles.filterRow}>\r\n                            Filter by NGO:\r\n                            <select\r\n                                value={PersonalInfo.selectedNgo || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    selectedNgo: e.target.value\r\n                                }))}\r\n                                className={styles.Select}\r\n                            >\r\n                                <option value=\"\">Select NGO</option>\r\n                                {/* Create a unique list of NGOs sorted alphabetically */}\r\n                                {[...new Map(subscriptions.map(sub => [sub.ngo_id, sub]))\r\n                                    .values()]\r\n                                    .sort((a, b) => a.ngo_name.localeCompare(b.ngo_name))\r\n                                    .map(sub => (\r\n                                        <option key={sub.ngo_id} value={sub.ngo_id}>\r\n                                            {sub.ngo_name}\r\n                                        </option>\r\n                                    ))\r\n                                }\r\n                            </select>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.filterButton}\r\n                                onClick={() => {\r\n                                    // Log selected value for debugging\r\n                                    console.log(\"Selected NGO ID:\", PersonalInfo.selectedNgo);\r\n                                    console.log(\"All subscriptions:\", subscriptions);\r\n\r\n                                    if (PersonalInfo.selectedNgo) {\r\n                                        // Show only subscriptions for the selected NGO\r\n                                        const filtered = subscriptions.filter(\r\n                                            sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo)\r\n                                        );\r\n\r\n                                        console.log(\"Filtered subscriptions:\", filtered);\r\n\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredSubscriptions: filtered,\r\n                                            subscriptionsFiltered: true\r\n                                        }));\r\n                                    } else {\r\n                                        // If no NGO selected or \"Select NGO\" is chosen, show all\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredSubscriptions: subscriptions,\r\n                                            subscriptionsFiltered: false\r\n                                        }));\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Filter\r\n\r\n                            </button>\r\n                        </div>\r\n                        {/* Second row */}\r\n                        <div className={styles.filterRow}>\r\n                            Filter by user:\r\n                            <select\r\n                                value={PersonalInfo.selectedUser || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    selectedUser: e.target.value\r\n                                }))}\r\n                                className={styles.Select}\r\n                            >\r\n                                <option value=\"\">Select user</option>\r\n                                {/* Create a unique list of NGOs sorted alphabetically */}\r\n                                {[...new Map(subscriptions.map(sub => [sub.user_id, sub]))\r\n                                    .values()]\r\n                                    .sort((a, b) => String(a.user_id).localeCompare(String(b.user_id)))\r\n                                    .map(sub => (\r\n                                        <option key={sub.user_id} value={sub.user_id}>\r\n                                            {sub.user_id}\r\n                                        </option>\r\n                                    ))\r\n                                }\r\n                            </select>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.filterButton}\r\n                                onClick={() => {\r\n                                    // Always start with the original subscription list for user filtering\r\n                                    let filtered = [...subscriptions];\r\n\r\n                                    if (PersonalInfo.selectedUser) {\r\n                                        // Filter by selected user_id\r\n                                        filtered = filtered.filter(\r\n                                            sub => String(sub.user_id) === String(PersonalInfo.selectedUser)\r\n                                        );\r\n\r\n                                        // Re-apply other filters if they were active\r\n                                        if (PersonalInfo.minAmount) {\r\n                                            filtered = filtered.filter(sub =>\r\n                                                parseFloat(sub.amount) >= parseFloat(PersonalInfo.minAmount)\r\n                                            );\r\n                                        }\r\n\r\n                                        if (PersonalInfo.maxAmount) {\r\n                                            filtered = filtered.filter(sub =>\r\n                                                parseFloat(sub.amount) <= parseFloat(PersonalInfo.maxAmount)\r\n                                            );\r\n                                        }\r\n\r\n                                        // Apply NGO filter if active\r\n                                        if (PersonalInfo.selectedNgo) {\r\n                                            filtered = filtered.filter(\r\n                                                sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo)\r\n                                            );\r\n                                        }\r\n\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredSubscriptions: filtered,\r\n                                            subscriptionsFiltered: true,\r\n                                            userFilterApplied: true\r\n                                        }));\r\n                                    } else {\r\n                                        // If no user is selected, apply other filters if they exist\r\n                                        let resetFiltered = [...subscriptions];\r\n\r\n                                        // Re-apply other filters\r\n                                        if (PersonalInfo.minAmount) {\r\n                                            resetFiltered = resetFiltered.filter(sub =>\r\n                                                parseFloat(sub.amount) >= parseFloat(PersonalInfo.minAmount)\r\n                                            );\r\n                                        }\r\n\r\n                                        if (PersonalInfo.maxAmount) {\r\n                                            resetFiltered = resetFiltered.filter(sub =>\r\n                                                parseFloat(sub.amount) <= parseFloat(PersonalInfo.maxAmount)\r\n                                            );\r\n                                        }\r\n\r\n                                        // Apply NGO filter if active\r\n                                        if (PersonalInfo.selectedNgo) {\r\n                                            resetFiltered = resetFiltered.filter(\r\n                                                sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo)\r\n                                            );\r\n                                        }\r\n\r\n                                        const stillFiltered = PersonalInfo.minAmount ||\r\n                                            PersonalInfo.maxAmount ||\r\n                                            PersonalInfo.selectedNgo;\r\n\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredSubscriptions: stillFiltered ? resetFiltered : null,\r\n                                            subscriptionsFiltered: !!stillFiltered,\r\n                                            userFilterApplied: false\r\n                                        }));\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Filter\r\n                            </button>\r\n                        </div>\r\n                        {/* Third row */}\r\n                        <div className={styles.filterRow}>\r\n                            Filter by value:\r\n                            <input\r\n                                type=\"number\"\r\n                                placeholder=\"Min amount\"\r\n                                value={PersonalInfo.minAmount || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    minAmount: e.target.value\r\n                                }))}\r\n                                className={styles.amountInput}\r\n                            />\r\n                            <input\r\n                                type=\"number\"\r\n                                placeholder=\"Max amount\"\r\n                                value={PersonalInfo.maxAmount || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    maxAmount: e.target.value\r\n                                }))}\r\n                                className={styles.amountInput}\r\n                            />\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.filterButton}\r\n                                onClick={() => {\r\n                                    // Always start with the original subscriptions\r\n                                    let filtered = [...subscriptions];\r\n\r\n                                    // Apply user filter if it's active\r\n                                    if (PersonalInfo.selectedUser) {\r\n                                        filtered = filtered.filter(\r\n                                            sub => String(sub.user_id) === String(PersonalInfo.selectedUser)\r\n                                        );\r\n                                    }\r\n\r\n                                    // Apply NGO filter if it's active\r\n                                    if (PersonalInfo.selectedNgo) {\r\n                                        filtered = filtered.filter(\r\n                                            sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo)\r\n                                        );\r\n                                    }\r\n\r\n                                    // Apply min amount filter if provided\r\n                                    if (PersonalInfo.minAmount) {\r\n                                        const minValue = parseFloat(PersonalInfo.minAmount);\r\n                                        filtered = filtered.filter(sub =>\r\n                                            parseFloat(sub.amount) >= minValue\r\n                                        );\r\n                                    }\r\n\r\n                                    // Apply max amount filter if provided\r\n                                    if (PersonalInfo.maxAmount) {\r\n                                        const maxValue = parseFloat(PersonalInfo.maxAmount);\r\n                                        filtered = filtered.filter(sub =>\r\n                                            parseFloat(sub.amount) <= maxValue\r\n                                        );\r\n                                    }\r\n\r\n                                    // Determine if any filter is applied\r\n                                    const isAnyFilterApplied = PersonalInfo.selectedUser ||\r\n                                        PersonalInfo.selectedNgo ||\r\n                                        PersonalInfo.minAmount ||\r\n                                        PersonalInfo.maxAmount;\r\n\r\n                                    // Update state with filtered data\r\n                                    setPersonalInfo(prev => ({\r\n                                        ...prev,\r\n                                        filteredSubscriptions: isAnyFilterApplied ? filtered : null,\r\n                                        subscriptionsFiltered: !!isAnyFilterApplied,\r\n                                        amountFilterApplied: !!(PersonalInfo.minAmount || PersonalInfo.maxAmount)\r\n                                    }));\r\n\r\n                                }}\r\n                            >\r\n                                Filter\r\n                            </button>\r\n                        </div>\r\n                        {/* Third row */}\r\n                        <div className={styles.filterRow}>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.cleanButton}\r\n                                onClick={() => {\r\n                                    // Reset all filters\r\n                                    setPersonalInfo(prev => ({\r\n                                        ...prev,\r\n                                        selectedNgo: '',\r\n                                        minAmount: '',\r\n                                        maxAmount: '',\r\n                                        filteredSubscriptions: null,\r\n                                        subscriptionsFiltered: false,\r\n                                        amountFilterApplied: false\r\n                                    }));\r\n                                }}\r\n                            >\r\n                                Clean filters\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* DONATIONS CONTROL */}\r\n                {/* Only show tag input and button when donations section (index 1) is open */}\r\n\r\n                {openSections.includes(1) && (\r\n                    <div className={styles.tagInputContainer}>\r\n                        <h4>Donations filters</h4>\r\n                        {/* First row */}\r\n                        <div className={styles.filterRow}>\r\n                            Filter by NGO:\r\n                            <select\r\n                                value={PersonalInfo.selectedNgo || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    selectedNgo: e.target.value\r\n                                }))}\r\n                                className={styles.Select}\r\n                            >\r\n                                <option value=\"\">Select NGO</option>\r\n                                {/* Create a unique list of NGOs sorted alphabetically */}\r\n                                {[...new Map(donations.map(sub => [sub.ngo_id, sub]))\r\n                                    .values()]\r\n                                    .sort((a, b) => a.ngo_name.localeCompare(b.ngo_name))\r\n                                    .map(sub => (\r\n                                        <option key={sub.ngo_id} value={sub.ngo_id}>\r\n                                            {sub.ngo_name}\r\n                                        </option>\r\n                                    ))\r\n                                }\r\n                            </select>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.filterButton}\r\n                                onClick={() => {\r\n                                    // Log selected value for debugging\r\n                                    console.log(\"Selected NGO ID:\", PersonalInfo.selectedNgo);\r\n                                    console.log(\"All donations:\", donations);\r\n\r\n                                    if (PersonalInfo.selectedNgo) {\r\n                                        // Show only subscriptions for the selected NGO\r\n                                        const filtered = donations.filter(\r\n                                            sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo)\r\n                                        );\r\n\r\n                                        console.log(\"Filtered donations:\", filtered);\r\n\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredDonations: filtered,\r\n                                            donationsFiltered: true\r\n                                        }));\r\n                                    } else {\r\n                                        // If no NGO selected or \"Select NGO\" is chosen, show all\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredDonations: donations,\r\n                                            donationsFiltered: false\r\n                                        }));\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Filter\r\n\r\n                            </button>\r\n                        </div>\r\n                        {/* Second row */}\r\n                        <div className={styles.filterRow}>\r\n                            Filter by user:\r\n                            <select\r\n                                value={PersonalInfo.selectedUser || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    selectedUser: e.target.value\r\n                                }))}\r\n                                className={styles.Select}\r\n                            >\r\n                                <option value=\"\">Select user</option>\r\n                                {/* Create a unique list of NGOs sorted alphabetically */}\r\n                                {[...new Map(donations.map(sub => [sub.user_id, sub]))\r\n                                    .values()]\r\n                                    .sort((a, b) => String(a.user_id).localeCompare(String(b.user_id)))\r\n                                    .map(sub => (\r\n                                        <option key={sub.user_id} value={sub.user_id}>\r\n                                            {sub.user_id}\r\n                                        </option>\r\n                                    ))\r\n                                }\r\n                            </select>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.filterButton}\r\n                                onClick={() => {\r\n                                    // Always start with the original subscription list for user filtering\r\n                                    let filtered = [...donations];\r\n\r\n                                    if (PersonalInfo.selectedUser) {\r\n                                        // Filter by selected user_id\r\n                                        filtered = filtered.filter(\r\n                                            sub => String(sub.user_id) === String(PersonalInfo.selectedUser)\r\n                                        );\r\n\r\n                                        // Re-apply other filters if they were active\r\n                                        if (PersonalInfo.minAmount) {\r\n                                            filtered = filtered.filter(sub =>\r\n                                                parseFloat(sub.amount) >= parseFloat(PersonalInfo.minAmount)\r\n                                            );\r\n                                        }\r\n\r\n                                        if (PersonalInfo.maxAmount) {\r\n                                            filtered = filtered.filter(sub =>\r\n                                                parseFloat(sub.amount) <= parseFloat(PersonalInfo.maxAmount)\r\n                                            );\r\n                                        }\r\n\r\n                                        // Apply NGO filter if active\r\n                                        if (PersonalInfo.selectedNgo) {\r\n                                            filtered = filtered.filter(\r\n                                                sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo)\r\n                                            );\r\n                                        }\r\n\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredDonations: filtered,\r\n                                            donationsFiltered: true,\r\n                                            userFilterApplied: true\r\n                                        }));\r\n                                    } else {\r\n                                        // If no user is selected, apply other filters if they exist\r\n                                        let resetFiltered = [...donations];\r\n\r\n                                        // Re-apply other filters\r\n                                        if (PersonalInfo.minAmount) {\r\n                                            resetFiltered = resetFiltered.filter(sub =>\r\n                                                parseFloat(sub.amount) >= parseFloat(PersonalInfo.minAmount)\r\n                                            );\r\n                                        }\r\n\r\n                                        if (PersonalInfo.maxAmount) {\r\n                                            resetFiltered = resetFiltered.filter(sub =>\r\n                                                parseFloat(sub.amount) <= parseFloat(PersonalInfo.maxAmount)\r\n                                            );\r\n                                        }\r\n\r\n                                        // Apply NGO filter if active\r\n                                        if (PersonalInfo.selectedNgo) {\r\n                                            resetFiltered = resetFiltered.filter(\r\n                                                sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo)\r\n                                            );\r\n                                        }\r\n\r\n                                        const stillFiltered = PersonalInfo.minAmount ||\r\n                                            PersonalInfo.maxAmount ||\r\n                                            PersonalInfo.selectedNgo;\r\n\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredDonations: stillFiltered ? resetFiltered : null,\r\n                                            donationsFiltered: !!stillFiltered,\r\n                                            userFilterApplied: false\r\n                                        }));\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Filter\r\n                            </button>\r\n                        </div>\r\n                        {/* Third row */}\r\n                        <div className={styles.filterRow}>\r\n                            Filter by value:\r\n                            <input\r\n                                type=\"number\"\r\n                                placeholder=\"Min amount\"\r\n                                value={PersonalInfo.minAmount || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    minAmount: e.target.value\r\n                                }))}\r\n                                className={styles.amountInput}\r\n                            />\r\n                            <input\r\n                                type=\"number\"\r\n                                placeholder=\"Max amount\"\r\n                                value={PersonalInfo.maxAmount || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    maxAmount: e.target.value\r\n                                }))}\r\n                                className={styles.amountInput}\r\n                            />\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.filterButton}\r\n                                onClick={() => {\r\n                                    // Always start with the original subscriptions\r\n                                    let filtered = [...donations];\r\n\r\n                                    // Apply user filter if it's active\r\n                                    if (PersonalInfo.selectedUser) {\r\n                                        filtered = filtered.filter(\r\n                                            sub => String(sub.user_id) === String(PersonalInfo.selectedUser)\r\n                                        );\r\n                                    }\r\n\r\n                                    // Apply NGO filter if it's active\r\n                                    if (PersonalInfo.selectedNgo) {\r\n                                        filtered = filtered.filter(\r\n                                            sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo)\r\n                                        );\r\n                                    }\r\n\r\n                                    // Apply min amount filter if provided\r\n                                    if (PersonalInfo.minAmount) {\r\n                                        const minValue = parseFloat(PersonalInfo.minAmount);\r\n                                        filtered = filtered.filter(sub =>\r\n                                            parseFloat(sub.amount) >= minValue\r\n                                        );\r\n                                    }\r\n\r\n                                    // Apply max amount filter if provided\r\n                                    if (PersonalInfo.maxAmount) {\r\n                                        const maxValue = parseFloat(PersonalInfo.maxAmount);\r\n                                        filtered = filtered.filter(sub =>\r\n                                            parseFloat(sub.amount) <= maxValue\r\n                                        );\r\n                                    }\r\n\r\n                                    // Determine if any filter is applied\r\n                                    const isAnyFilterApplied = PersonalInfo.selectedUser ||\r\n                                        PersonalInfo.selectedNgo ||\r\n                                        PersonalInfo.minAmount ||\r\n                                        PersonalInfo.maxAmount;\r\n\r\n                                    // Update state with filtered data\r\n                                    setPersonalInfo(prev => ({\r\n                                        ...prev,\r\n                                        filteredDonations: isAnyFilterApplied ? filtered : null,\r\n                                        donationsFiltered: !!isAnyFilterApplied,\r\n                                        amountFilterApplied: !!(PersonalInfo.minAmount || PersonalInfo.maxAmount)\r\n                                    }));\r\n\r\n                                }}\r\n                            >\r\n                                Filter\r\n                            </button>\r\n                        </div>\r\n                        {/* Fourth row */}\r\n                        <div className={styles.filterRow}>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.cleanButton}\r\n                                onClick={() => {\r\n                                    // Reset all filters\r\n                                    setPersonalInfo(prev => ({\r\n                                        ...prev,\r\n                                        selectedNgo: '',\r\n                                        minAmount: '',\r\n                                        maxAmount: '',\r\n                                        filteredDonations: null,\r\n                                        donationsFiltered: false,\r\n                                        amountFilterApplied: false\r\n                                    }));\r\n                                }}\r\n                            >\r\n                                Clean filters\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* PENDING VERIFICATIONS */}\r\n                {/* Only show tag input and button when verifications section (index 2) is open */}\r\n\r\n                {openSections.includes(2) && (\r\n                    <div className={styles.tagInputContainer}>\r\n                        <h4>Verifications filters</h4>\r\n\r\n                    </div>\r\n                )}\r\n\r\n                {/* ALL TAGS */}\r\n                {/* Only show tag input and button when tags section (index 3) is open */}\r\n                {openSections.includes(3) && (\r\n                    <div className={styles.tagInputContainer}>\r\n                        <h4>Tags options</h4>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={newTag}\r\n                            onChange={(e) => setNewTag(e.target.value)}\r\n                            placeholder=\"Enter new tag\"\r\n                            className={styles.tagInput}\r\n                        />\r\n                        <button\r\n                            type=\"button\"\r\n                            className={styles.addTagButton}\r\n                            onClick={handleAddTag}\r\n                            disabled={!newTag.trim()}\r\n                        >\r\n                            Add Tag\r\n                        </button>\r\n                    </div>\r\n                )}\r\n\r\n                {/* ALL ACTIONS */}\r\n                {/* Only show tag input and button when actions section (index 4) is open */}\r\n\r\n                {openSections.includes(4) && (\r\n                    <div className={styles.tagInputContainer}>\r\n                        <h4>Actions filters</h4>\r\n                        {/* First row */}\r\n                        <div className={styles.filterRow}>\r\n                            Filter by action type:\r\n                            <select\r\n                                value={PersonalInfo.selectedAction || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    selectedAction: e.target.value\r\n                                }))}\r\n                                className={styles.Select}\r\n                            >\r\n                                <option value=\"\">Select action type</option>\r\n                                {/* Create a unique list of action types sorted alphabetically */}\r\n                                {[...new Map(actions.map(action => [action.action_type, action]))\r\n                                    .values()]\r\n                                    .sort((a, b) => String(a.action_type).localeCompare(String(b.action_type)))\r\n                                    .map(action => (\r\n                                        <option key={action.action_type} value={action.action_type}>\r\n                                            {action.action_type}\r\n                                        </option>\r\n                                    ))\r\n                                }\r\n                            </select>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.filterButton}\r\n                                onClick={() => {\r\n                                    // Log selected value for debugging\r\n                                    console.log(\"Selected NGO ID:\", PersonalInfo.selectedAction);\r\n                                    console.log(\"All actions:\", actions);\r\n\r\n                                    if (PersonalInfo.selectedAction) {\r\n                                        // Show only subscriptions for the selected NGO\r\n                                        const filtered = actions.filter(\r\n                                            sub => String(sub.action_type) === String(PersonalInfo.selectedAction)\r\n                                        );\r\n\r\n                                        console.log(\"Filtered actions:\", filtered);\r\n\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredActions: filtered,\r\n                                            actionsFiltered: true\r\n                                        }));\r\n                                    } else {\r\n                                        // If no NGO selected or \"Select NGO\" is chosen, show all\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredActions: actions,\r\n                                            actionsFiltered: false\r\n                                        }));\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Filter\r\n\r\n                            </button>\r\n                        </div>\r\n                        {/* Second row */}\r\n\r\n                        {/* Third row */}\r\n                        <div className={styles.filterRow}>\r\n                            Filter by date:\r\n                            <input\r\n                                type=\"date\"\r\n                                placeholder=\"Begin date\"\r\n                                value={PersonalInfo.beginDate || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    beginDate: e.target.value\r\n                                }))}\r\n                                className={styles.amountInput}\r\n                            />\r\n                            <input\r\n                                type=\"date\"\r\n                                placeholder=\"End date\"\r\n                                value={PersonalInfo.endDate || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    endDate: e.target.value\r\n                                }))}\r\n                                className={styles.amountInput}\r\n                            />\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.filterButton}\r\n                                onClick={() => {\r\n                                    // Always start with the original actions\r\n                                    let filtered = [...actions];\r\n\r\n                                    // Apply action type filter if it's active\r\n                                    if (PersonalInfo.selectedAction) {\r\n                                        filtered = filtered.filter(\r\n                                            sub => String(sub.action_type) === String(PersonalInfo.selectedAction)\r\n                                        );\r\n                                    }\r\n\r\n                                    // Apply begin date filter if provided\r\n                                    if (PersonalInfo.beginDate) {\r\n                                        const beginDateObj = new Date(PersonalInfo.beginDate);\r\n                                        filtered = filtered.filter(sub => {\r\n                                            const actionDate = new Date(sub.action_date);\r\n                                            return actionDate >= beginDateObj;\r\n                                        });\r\n                                    }\r\n\r\n                                    // Apply end date filter if provided\r\n                                    if (PersonalInfo.endDate) {\r\n                                        const endDateObj = new Date(PersonalInfo.endDate);\r\n                                        // Add one day to include the end date fully\r\n                                        endDateObj.setDate(endDateObj.getDate() + 1);\r\n                                        filtered = filtered.filter(sub => {\r\n                                            const actionDate = new Date(sub.action_date);\r\n                                            return actionDate < endDateObj;\r\n                                        });\r\n                                    }\r\n\r\n                                    // Determine if any filter is applied\r\n                                    const isAnyFilterApplied = PersonalInfo.selectedAction ||\r\n                                        PersonalInfo.beginDate ||\r\n                                        PersonalInfo.endDate;\r\n\r\n                                    // Update state with filtered data\r\n                                    setPersonalInfo(prev => ({\r\n                                        ...prev,\r\n                                        filteredActions: isAnyFilterApplied ? filtered : null,\r\n                                        actionsFiltered: !!isAnyFilterApplied, // Fixed typo: acitonsFiltered â†’ actionsFiltered\r\n                                        dateFilterApplied: !!(PersonalInfo.beginDate || PersonalInfo.endDate) // Changed from amountFilterApplied to dateFilterApplied for clarity\r\n                                    }));\r\n                                }}\r\n                            >\r\n                                Filter\r\n                            </button>\r\n                        </div>\r\n\r\n                        {/* Fourth row */}\r\n                        <div className={styles.filterRow}>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.cleanButton}\r\n                                onClick={() => {\r\n                                    // Reset all filters\r\n                                    setPersonalInfo(prev => ({\r\n                                        ...prev,\r\n                                        selectedAction: '',\r\n                                        beginDate: '',\r\n                                        endDate: '',\r\n                                        filteredAction: null,\r\n                                        actionsFiltered: false,\r\n                                        amountFilterApplied: false\r\n                                    }));\r\n                                }}\r\n                            >\r\n                                Clean filters\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className={styles.page}>\r\n            <Header/>\r\n            <div className={styles.profileWrapper}>\r\n                <div className={styles.leftSideBar}>\r\n                    <div className={styles.photoSection}>\r\n                        <img\r\n                            className={styles.profilePic}\r\n                            src={PersonalInfo.image || \"ngo_icon.png\"}\r\n                            alt=\"Your image\"\r\n                        />\r\n                        <input\r\n                            type=\"file\"\r\n                            ref={fileInputRef}\r\n                            onChange={handleFileChange}\r\n                            style={{display: \"none\"}}\r\n                            accept=\"image/*\"\r\n                        />\r\n                        <button\r\n                            type=\"button\"\r\n                            className={styles.uploadButton}\r\n                            onClick={handlePhotoClick}\r\n                        >\r\n                            Add picture\r\n                        </button>\r\n                    </div>\r\n                    <div className={styles.informationContainer}>\r\n                        {renderPersonalInfo()}\r\n                    </div>\r\n\r\n\r\n                </div>\r\n\r\n                <div className={styles.rightSideBar}>\r\n                    {displayedSections.map((section, index) => {\r\n                        let data = [];\r\n\r\n                        if (index === 0) data = PersonalInfo.subscriptionsFiltered ? PersonalInfo.filteredSubscriptions : subscriptions;\r\n                        if (index === 1) data = PersonalInfo.donationsFiltered ? PersonalInfo.filteredDonations : donations;\r\n                        if (index === 2) data = verifications;\r\n                        if (index === 3) data = tags;\r\n                        if (index === 4) data = PersonalInfo.actionsFiltered ? PersonalInfo.filteredActions : actions;\r\n\r\n                        return (\r\n                            <div className={styles.accordionSection} key={index}>\r\n                                <div\r\n                                    className={styles.accordionTitle}\r\n                                    onClick={() => toggleSection(index)}\r\n                                >\r\n                                    {section.title}\r\n                                </div>\r\n                                <div\r\n                                    className={`${styles.accordionContent} ${openSections.includes(index) ? styles.open : \"\"}`}\r\n                                >\r\n                                    <ul>\r\n                                        {data.length > 0 ? (\r\n                                            data.map((item, i) => (\r\n                                                <li key={i}>\r\n                                                    <div>\r\n                                                        <div>\r\n                                                            <strong>{item.ngo_name || item.username || item.name || item.tag || item.action_details + \" on \" + item.action_date || \"Unnamed\"}</strong>\r\n                                                        </div>\r\n                                                        {index === 4 && (\r\n                                                            <div>{\"NGO (id) affected:\" + item.ngo_id}</div>)}\r\n\r\n                                                        <div\r\n                                                            style={{\r\n                                                                fontSize: '0.85rem',\r\n                                                                fontWeight: 'bold',\r\n                                                                color: item.status === 'active' ? 'green' : 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            {item.status || \"\"}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <span>{item.amount != null ? `${item.amount} â‚¬` : ''}</span>\r\n                                                        {index === 4 && (\r\n                                                            <div className={styles.adminDisplay}>\r\n                                                                {<>\r\n                                                                    <div>\r\n                                                                        {\"Admin (id): \" + item.admin_id}\r\n                                                                    </div>\r\n                                                                    <div>\r\n                                                                        {\"Action id: \" + item.action_id}\r\n                                                                    </div>\r\n                                                                </>}\r\n                                                            </div>)}\r\n                                                        {/* Only show toggle button in subscriptions (index 0) */}\r\n                                                        {index === 0 && (\r\n                                                            <button className={styles.itemButton}\r\n                                                                    onClick={() => handleStatusChange(item.subscription_id, item.status, item.ngo_id)}\r\n                                                            >\r\n                                                                {item.status === 'active' ? 'Cancel' : 'Activate'}\r\n                                                            </button>\r\n                                                        )}\r\n                                                        {/* Only show report donation in donations (index 1) */}\r\n                                                        {index === 1 && (\r\n                                                            <button className={styles.itemButton}\r\n                                                                    onClick={() => handleReportDonation(item.subscription_id, item.status)}\r\n                                                            >\r\n                                                                {'Report'}\r\n                                                            </button>\r\n                                                        )}\r\n                                                        {/* Only show redirect to verification (index 2) */}\r\n                                                        {index === 2 && (\r\n                                                            <button className={styles.itemButton}\r\n                                                                    onClick={() => handleRedirectVerification(item.ngo_id)}\r\n                                                            >\r\n                                                                {'To verification'}\r\n                                                            </button>\r\n                                                        )}\r\n                                                        {/* Only show remove tag to verification (index 3) */}\r\n                                                        {index === 3 && (\r\n                                                            <button className={styles.itemButton}\r\n                                                                    onClick={() => handleRemoveTag(item.tag_id, item.tag)}\r\n                                                            >\r\n                                                                {'Remove'}\r\n                                                            </button>\r\n                                                        )}\r\n                                                    </div>\r\n                                                </li>\r\n                                            ))\r\n                                        ) : (\r\n                                            <li>Nothing yet</li>\r\n                                        )}\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            <footer></footer>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Admin;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}