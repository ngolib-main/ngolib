{"ast":null,"code":"var _jsxFileName = \"/home/javi/Server/src/components/reusable/ProtectedRoute.js\",\n  _s = $RefreshSig$();\n/*\r\n * -- PROTECTED ROUTE --\r\n * This file helps restricting access to certain routes\r\n * according to user's authentication status\r\n *\r\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProtectedRoute({\n  children,\n  allowedRoles\n}) {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetch(\"/api/auth/me\", {\n      credentials: \"include\"\n    }).then(res => res.ok ? res.json() : null).then(data => {\n      setUser(data);\n      setLoading(false);\n    }).catch(() => {\n      setUser(null);\n      setLoading(false);\n    });\n  }, []);\n  if (loading) return null; // Or show a spinner\n\n  if (!user) return /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 23\n  }, this);\n  if (!allowedRoles.includes(user.type)) {\n    // Redirect to the correct route for their role\n    if (user.type === \"admin\") return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/admin\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 43\n    }, this);\n    if (user.type === \"NGO\") return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/profile\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 41\n    }, this);\n    if (user.type === \"user\") return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/user\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 42\n    }, this);\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/home\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 16\n    }, this);\n  }\n  return children;\n}\n_s(ProtectedRoute, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","jsxDEV","_jsxDEV","ProtectedRoute","children","allowedRoles","_s","user","setUser","loading","setLoading","fetch","credentials","then","res","ok","json","data","catch","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","includes","type","_c","$RefreshReg$"],"sources":["/home/javi/Server/src/components/reusable/ProtectedRoute.js"],"sourcesContent":["/*\r\n * -- PROTECTED ROUTE --\r\n * This file helps restricting access to certain routes\r\n * according to user's authentication status\r\n *\r\n */\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Navigate } from 'react-router-dom';\r\n\r\nfunction ProtectedRoute({ children, allowedRoles }) {\r\n    const [user, setUser] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        fetch(\"/api/auth/me\", {\r\n            credentials: \"include\"\r\n        })\r\n            .then(res => res.ok ? res.json() : null)\r\n            .then(data => {\r\n                setUser(data);\r\n                setLoading(false);\r\n            })\r\n            .catch(() => {\r\n                setUser(null);\r\n                setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    if (loading) return null; // Or show a spinner\r\n\r\n    if (!user) return <Navigate to=\"/login\" replace />;\r\n    if (!allowedRoles.includes(user.type)) {\r\n        // Redirect to the correct route for their role\r\n        if (user.type === \"admin\") return <Navigate to=\"/admin\" replace />;\r\n        if (user.type === \"NGO\") return <Navigate to=\"/profile\" replace />;\r\n        if (user.type === \"user\") return <Navigate to=\"/user\" replace />;\r\n        return <Navigate to=\"/home\" replace />;\r\n    }\r\n\r\n    return children;\r\n}\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,cAAcA,CAAC;EAAEC,QAAQ;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EAChD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACZa,KAAK,CAAC,cAAc,EAAE;MAClBC,WAAW,EAAE;IACjB,CAAC,CAAC,CACGC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,CACvCH,IAAI,CAACI,IAAI,IAAI;MACVT,OAAO,CAACS,IAAI,CAAC;MACbP,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC,CACDQ,KAAK,CAAC,MAAM;MACTV,OAAO,CAAC,IAAI,CAAC;MACbE,UAAU,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;EACV,CAAC,EAAE,EAAE,CAAC;EAEN,IAAID,OAAO,EAAE,OAAO,IAAI,CAAC,CAAC;;EAE1B,IAAI,CAACF,IAAI,EAAE,oBAAOL,OAAA,CAACF,QAAQ;IAACmB,EAAE,EAAC,QAAQ;IAACC,OAAO;EAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EAClD,IAAI,CAACnB,YAAY,CAACoB,QAAQ,CAAClB,IAAI,CAACmB,IAAI,CAAC,EAAE;IACnC;IACA,IAAInB,IAAI,CAACmB,IAAI,KAAK,OAAO,EAAE,oBAAOxB,OAAA,CAACF,QAAQ;MAACmB,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAClE,IAAIjB,IAAI,CAACmB,IAAI,KAAK,KAAK,EAAE,oBAAOxB,OAAA,CAACF,QAAQ;MAACmB,EAAE,EAAC,UAAU;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAClE,IAAIjB,IAAI,CAACmB,IAAI,KAAK,MAAM,EAAE,oBAAOxB,OAAA,CAACF,QAAQ;MAACmB,EAAE,EAAC,OAAO;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAChE,oBAAOtB,OAAA,CAACF,QAAQ;MAACmB,EAAE,EAAC,OAAO;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC1C;EAEA,OAAOpB,QAAQ;AACnB;AAACE,EAAA,CA/BQH,cAAc;AAAAwB,EAAA,GAAdxB,cAAc;AAiCvB,eAAeA,cAAc;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}