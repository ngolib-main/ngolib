{"ast":null,"code":"var _jsxFileName = \"/home/javi/Server/src/components/account/Admin.js\",\n  _s = $RefreshSig$();\n/*\r\n *  -- Admin.js --\r\n *\r\n *\r\n *\r\n */\n\nimport * as React from 'react';\nimport { useEffect, useRef, useState } from \"react\";\nimport Header from \"../reusable/Header\";\nimport { displayedSectionsAdmin } from \"../profile/displaySections\";\nimport styles from \"../../style/page/profile.module.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Admin() {\n  _s();\n  const [openSections, setOpenSections] = useState([]);\n  const [PersonalInfo, setPersonalInfo] = useState(null);\n  const fileInputRef = useRef(null);\n  const [newTag, setNewTag] = useState('');\n  useEffect(() => {\n    const fetchProfile = async () => {\n      try {\n        const response = await fetch(\"/api/profile\", {\n          method: \"GET\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        const data = await response.json();\n        console.log(data);\n        setPersonalInfo(data);\n      } catch (error) {\n        alert(\"Something went wrong, try again later\");\n      }\n    };\n    fetchProfile();\n  }, []);\n  const handlePhotoClick = () => {\n    fileInputRef.current.click();\n  };\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    if (!file) {\n      return alert(\"Wrong file â€” try again\");\n    }\n\n    // Use FileReader to get Base64\n    const reader = new FileReader();\n    reader.onload = async () => {\n      const imageBase64 = reader.result;\n      try {\n        const res = await fetch(\"http://localhost:5000/api/profile/image\", {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            imageBase64\n          })\n        });\n        if (!res.ok) {\n          const err = await res.json().catch(() => ({}));\n          throw new Error(err.message || \"Upload failed\");\n        }\n        const data = await res.json();\n        console.log(\"Upload successful:\", data);\n        alert(\"Upload successful\");\n        setPersonalInfo(prev => ({\n          ...prev,\n          image: imageBase64\n        }));\n      } catch (error) {\n        console.error(\"Error uploading image:\", error);\n        alert(\"Error uploading image: \" + error.message);\n      }\n    };\n    reader.readAsDataURL(file);\n  };\n  const toggleSection = index => {\n    setOpenSections(prev => prev.includes(index) ? prev.filter(i => i !== index) : [...prev, index]);\n  };\n\n  // Add this function to handle adding a new tag\n  const handleAddTag = async () => {\n    if (newTag.trim()) {\n      try {\n        // API call to add a tag\n        const response = await fetch(\"/api/admin/tag\", {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            tag: newTag\n          })\n        });\n        const data = await response.json();\n        if (response.ok) {\n          // Update local state to show the new tag\n          setPersonalInfo(prev => ({\n            ...prev,\n            tags: [[...prev.tags[0], {\n              tag: newTag,\n              ...data\n            }]]\n          }));\n\n          // Clear the input\n          setNewTag('');\n\n          // Success alert\n          alert(`Tag \"${newTag}\" has been successfully added!`);\n\n          // Force a re-render of the accordion by adding a small delay\n          setTimeout(() => {\n            // This will trigger a re-render and potentially fix the accordion sizing\n            setPersonalInfo(prev => ({\n              ...prev\n            }));\n\n            // Alternatively, you could dispatch a window resize event\n            window.dispatchEvent(new Event('resize'));\n          }, 100);\n\n          // Log the admin action\n          try {\n            // Assuming admin_id and ngo_id are available in your component\n            // You might need to adjust this based on your actual data structure\n            const adminActionResponse = await fetch('/api/admin/actions', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                ngo_id: null,\n                // Assuming this is available in your state\n                admin_id: PersonalInfo.adminId,\n                // Assuming this is available in your state\n                action_type: 'tag_added',\n                action_details: `New tag with name ${newTag} was added`\n              })\n            });\n            if (!adminActionResponse.ok) {\n              console.error('Failed to log admin action');\n            }\n          } catch (actionErr) {\n            console.error('Error logging admin action:', actionErr);\n            // Not alerting the user about this error since the main operation succeeded\n          }\n        } else {\n          // Handle specific error cases\n          if (response.status === 409) {\n            alert(`Error: Tag \"${newTag}\" already exists.`);\n          } else {\n            alert(`Error: ${data.message || \"Failed to add tag. Please try again.\"}`);\n          }\n        }\n      } catch (err) {\n        console.error(err);\n        alert(\"Error adding tag\");\n      }\n    }\n  };\n\n  // Function to change the status of a subscription (active/canceled)\n  /* const handleStatusChange = async (subscriptionId, currentStatus, ngoId) => {\r\n       const newStatus = currentStatus === 'active' ? 'canceled' : 'active';\r\n         // Add confirmation dialog\r\n       const confirmAction = window.confirm(\r\n           `Are you sure you want to change this subscription status from \"${currentStatus}\" to \"${newStatus}\"?`\r\n       );\r\n         // Only proceed if the user confirms\r\n       if (!confirmAction) {\r\n           return; // Exit the function if user cancels\r\n       }\r\n         try {\r\n           const response = await fetch(`/api/admin/subscriptions/${subscriptionId}/status`, {\r\n               method: \"PUT\",\r\n               headers: { \"Content-Type\": \"application/json\" },\r\n               body: JSON.stringify({ status: newStatus }),\r\n           });\r\n             if (response.ok) {\r\n               // Update only that subscription's status locally\r\n               setPersonalInfo(prev => {\r\n                   const updatedSubs = prev.allSubscriptions.map(sub =>\r\n                       sub.subscription_id === subscriptionId ? { ...sub, status: newStatus } : sub\r\n                   );\r\n                   return { ...prev, allSubscriptions: updatedSubs };\r\n               });\r\n                 // Log the admin action\r\n               try {\r\n                   // Assuming admin_id and ngo_id are available in your component\r\n                   // You might need to adjust this based on your actual data structure\r\n                   const adminActionResponse = await fetch('/api/admin/actions', {\r\n                       method: 'POST',\r\n                       headers: { 'Content-Type': 'application/json' },\r\n                       body: JSON.stringify({\r\n                           ngo_id: ngoId, // Assuming this is available in your state\r\n                           admin_id: PersonalInfo.adminId, // Assuming this is available in your state\r\n                           action_type: 'subscription_status_change',\r\n                           action_details: `Changed subscription ${subscriptionId} status from ${currentStatus} to ${newStatus}`\r\n                       })\r\n                   });\r\n                     if (!adminActionResponse.ok) {\r\n                       console.error('Failed to log admin action');\r\n                   }\r\n               } catch (actionErr) {\r\n                   console.error('Error logging admin action:', actionErr);\r\n                   // Not alerting the user about this error since the main operation succeeded\r\n               }\r\n             } else {\r\n               alert(\"Failed to update subscription status\");\r\n           }\r\n       } catch (err) {\r\n           console.error(err);\r\n           alert(\"Error updating status\");\r\n       }\r\n   };*/\n\n  // Modified handleStatusChange function for the filtered list scenario\n  const handleStatusChange = async (subscriptionId, currentStatus, ngoId) => {\n    const newStatus = currentStatus === 'active' ? 'canceled' : 'active';\n\n    // Add confirmation dialog\n    const confirmAction = window.confirm(`Are you sure you want to change this subscription status from \"${currentStatus}\" to \"${newStatus}\"?`);\n\n    // Only proceed if the user confirms\n    if (!confirmAction) {\n      return; // Exit the function if user cancels\n    }\n    try {\n      const response = await fetch(`/api/admin/subscriptions/${subscriptionId}/status`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          status: newStatus\n        })\n      });\n      if (response.ok) {\n        // Update state to reflect the status change in both original and filtered lists\n        setPersonalInfo(prev => {\n          // Update in the original allSubscriptions array\n          const updatedSubs = prev.allSubscriptions.map(sub => sub.subscription_id === subscriptionId ? {\n            ...sub,\n            status: newStatus\n          } : sub);\n\n          // If we have a filtered list, update it too\n          let updatedFiltered = prev.filteredSubscriptions;\n          if (prev.isFiltered && prev.filteredSubscriptions) {\n            updatedFiltered = prev.filteredSubscriptions.map(sub => sub.subscription_id === subscriptionId ? {\n              ...sub,\n              status: newStatus\n            } : sub);\n          }\n          return {\n            ...prev,\n            allSubscriptions: updatedSubs,\n            filteredSubscriptions: updatedFiltered\n          };\n        });\n\n        // Log the admin action\n        try {\n          const adminActionResponse = await fetch('/api/admin/actions', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              ngo_id: ngoId,\n              admin_id: PersonalInfo.adminId,\n              action_type: 'subscription_status_change',\n              action_details: `Changed subscription ${subscriptionId} status from ${currentStatus} to ${newStatus}`\n            })\n          });\n          if (!adminActionResponse.ok) {\n            console.error('Failed to log admin action');\n          }\n        } catch (actionErr) {\n          console.error('Error logging admin action:', actionErr);\n        }\n      } else {\n        alert(\"Failed to update subscription status\");\n      }\n    } catch (err) {\n      console.error(err);\n      alert(\"Error updating status\");\n    }\n  };\n  const handleReportDonation = async donation_id => {};\n  const handleRedirectVerification = async ngo_id => {\n    try {\n      // Create a hidden form and submit it for a proper POST navigation\n      const form = document.createElement('form');\n      form.method = 'POST';\n      form.action = '/admin/verify-NGOs';\n      const hiddenField = document.createElement('input');\n      hiddenField.type = 'hidden';\n      hiddenField.name = 'ngo_id';\n      hiddenField.value = ngo_id;\n      form.appendChild(hiddenField);\n      document.body.appendChild(form);\n      form.submit();\n    } catch (err) {\n      console.error(\"Error redirecting to verification:\", err);\n      alert(\"Error navigating to verification page. Please try again.\");\n    }\n  };\n  const handleRemoveTag = async (tag_id, tag_name) => {\n    // Add confirmation dialog\n    const confirmAction = window.confirm(\"Are you sure you want to delete this tag?\");\n\n    // Only proceed if the user confirms\n    if (!confirmAction) {\n      return; // Exit the function if user cancels\n    }\n    try {\n      const response = await fetch(`/api/admin/delete-tag`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          tag_id: tag_id\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        // Force a complete refresh of profile data\n        // NOTE: Use this as a last resource if the stupid list of tags is not updating  after removal\n        /*\r\n        try {\r\n            const profileResponse = await fetch(\"/api/profile\", {\r\n                method: \"GET\",\r\n                credentials: \"include\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n            });\r\n              if (profileResponse.ok) {\r\n                const updatedData = await profileResponse.json();\r\n                setPersonalInfo(updatedData);\r\n                console.log(\"Profile data refreshed after tag deletion\");\r\n            } else {\r\n                console.error(\"Failed to refresh profile data\");\r\n            }\r\n          } catch (refreshError) {\r\n            console.error(\"Error refreshing data:\", refreshError);\r\n        }*/\n\n        // If deletion was successful, manually update the UI\n        // Force a full component refresh by creating a new copy of PersonalInfo\n        const updatedTags = [...PersonalInfo.tags];\n\n        // Filter out the deleted tag\n        if (Array.isArray(updatedTags[0])) {\n          updatedTags[0] = updatedTags[0].filter(tag => {\n            // Try to accommodate different ID field names\n            const tagIdentifier = tag.id || tag._id || tag.tag_id;\n            return tagIdentifier !== tag_id;\n          });\n        }\n        console.log(\"Tags after filtering:\", updatedTags);\n\n        // Create a completely new copy of the state to ensure React detects changes\n        const newPersonalInfo = {\n          ...PersonalInfo,\n          tags: updatedTags\n        };\n        console.log(\"New PersonalInfo:\", newPersonalInfo);\n\n        // Update the state with the new object\n        setPersonalInfo(newPersonalInfo);\n\n        // Success alert\n        alert(\"Tag has been successfully deleted!\");\n\n        // Log the admin action if you want to track this\n        try {\n          await fetch('/api/admin/actions', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            credentials: \"include\",\n            body: JSON.stringify({\n              admin_id: PersonalInfo.adminId,\n              action_type: 'tag_deleted',\n              action_details: `Deleted tag with ID ${tag_id}, and name ${tag_name}`\n            })\n          });\n        } catch (actionErr) {\n          console.error('Error logging admin action:', actionErr);\n          // Not alerting the user about this error since the main operation succeeded\n        }\n      } else {\n        // Handle specific error cases\n        if (response.status === 409) {\n          alert(\"Cannot delete this tag as it is currently in use by one or more NGOs.\");\n        } else if (response.status === 404) {\n          alert(\"Tag not found. It may have been already deleted.\");\n\n          // Still update the UI to remove it if it was somehow still in the UI\n          setPersonalInfo(prev => ({\n            ...prev,\n            tags: [prev.tags[0].filter(tag => tag.id !== tag_id)]\n          }));\n        } else {\n          alert(`Error: ${data.message || \"Failed to delete tag.\"}`);\n        }\n      }\n    } catch (err) {\n      console.error(\"Error deleting tag:\", err);\n      alert(\"Network error: Could not connect to the server. Please check your connection and try again.\");\n    }\n  };\n  if (!PersonalInfo) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.loadingWrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.spinner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.loadingText,\n        children: \"Loading profile data...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 13\n    }, this);\n  }\n  const user = PersonalInfo.user || {};\n  const displayedSections = displayedSectionsAdmin;\n  const subscriptions = PersonalInfo.allSubscriptions || [];\n  const donations = PersonalInfo.allDonations || [];\n  const actions = PersonalInfo.actions || [];\n  const tags = PersonalInfo.tags[0] || [];\n  const verifications = PersonalInfo.verifications || [];\n  const renderPersonalInfo = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.info,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: user.username || \"Unnamed admin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Email: \", user.email || \"No email provided\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 17\n      }, this), openSections.includes(0) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.tagInputContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Subscriptions filters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.filterRow,\n          children: [\"Filter by NGO:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: PersonalInfo.selectedNgo || '',\n            onChange: e => setPersonalInfo(prev => ({\n              ...prev,\n              selectedNgo: e.target.value\n            })),\n            className: styles.Select,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select NGO\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 33\n            }, this), [...new Map(subscriptions.map(sub => [sub.ngo_id, sub])).values()].sort((a, b) => a.ngo_name.localeCompare(b.ngo_name)).map(sub => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: sub.ngo_id,\n              children: sub.ngo_name\n            }, sub.ngo_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: styles.filterButton,\n            onClick: () => {\n              // Log selected value for debugging\n              console.log(\"Selected NGO ID:\", PersonalInfo.selectedNgo);\n              console.log(\"All subscriptions:\", subscriptions);\n              if (PersonalInfo.selectedNgo) {\n                // Show only subscriptions for the selected NGO\n                const filtered = subscriptions.filter(sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo));\n                console.log(\"Filtered subscriptions:\", filtered);\n                setPersonalInfo(prev => ({\n                  ...prev,\n                  filteredSubscriptions: filtered,\n                  subscriptionsFiltered: true\n                }));\n              } else {\n                // If no NGO selected or \"Select NGO\" is chosen, show all\n                setPersonalInfo(prev => ({\n                  ...prev,\n                  filteredSubscriptions: subscriptions,\n                  subscriptionsFiltered: false\n                }));\n              }\n            },\n            children: \"Filter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.filterRow,\n          children: [\"Filter by user:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: PersonalInfo.selectedUser || '',\n            onChange: e => setPersonalInfo(prev => ({\n              ...prev,\n              selectedUser: e.target.value\n            })),\n            className: styles.Select,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select user\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 548,\n              columnNumber: 33\n            }, this), [...new Map(subscriptions.map(sub => [sub.user_id, sub])).values()].sort((a, b) => String(a.user_id).localeCompare(String(b.user_id))).map(sub => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: sub.user_id,\n              children: sub.user_id\n            }, sub.user_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: styles.filterButton,\n            onClick: () => {\n              // Always start with the original subscription list for user filtering\n              let filtered = [...subscriptions];\n              if (PersonalInfo.selectedUser) {\n                // Filter by selected user_id\n                filtered = filtered.filter(sub => String(sub.user_id) === String(PersonalInfo.selectedUser));\n\n                // Re-apply other filters if they were active\n                if (PersonalInfo.minAmount) {\n                  filtered = filtered.filter(sub => parseFloat(sub.amount) >= parseFloat(PersonalInfo.minAmount));\n                }\n                if (PersonalInfo.maxAmount) {\n                  filtered = filtered.filter(sub => parseFloat(sub.amount) <= parseFloat(PersonalInfo.maxAmount));\n                }\n\n                // Apply NGO filter if active\n                if (PersonalInfo.selectedNgo) {\n                  filtered = filtered.filter(sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo));\n                }\n                setPersonalInfo(prev => ({\n                  ...prev,\n                  filteredSubscriptions: filtered,\n                  subscriptionsFiltered: true,\n                  userFilterApplied: true\n                }));\n              } else {\n                // If no user is selected, apply other filters if they exist\n                let resetFiltered = [...subscriptions];\n\n                // Re-apply other filters\n                if (PersonalInfo.minAmount) {\n                  resetFiltered = resetFiltered.filter(sub => parseFloat(sub.amount) >= parseFloat(PersonalInfo.minAmount));\n                }\n                if (PersonalInfo.maxAmount) {\n                  resetFiltered = resetFiltered.filter(sub => parseFloat(sub.amount) <= parseFloat(PersonalInfo.maxAmount));\n                }\n\n                // Apply NGO filter if active\n                if (PersonalInfo.selectedNgo) {\n                  resetFiltered = resetFiltered.filter(sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo));\n                }\n                const stillFiltered = PersonalInfo.minAmount || PersonalInfo.maxAmount || PersonalInfo.selectedNgo;\n                setPersonalInfo(prev => ({\n                  ...prev,\n                  filteredSubscriptions: stillFiltered ? resetFiltered : null,\n                  subscriptionsFiltered: !!stillFiltered,\n                  userFilterApplied: false\n                }));\n              }\n            },\n            children: \"Filter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.filterRow,\n          children: [\"Filter by value:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Min amount\",\n            value: PersonalInfo.minAmount || '',\n            onChange: e => setPersonalInfo(prev => ({\n              ...prev,\n              minAmount: e.target.value\n            })),\n            className: styles.amountInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 642,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Max amount\",\n            value: PersonalInfo.maxAmount || '',\n            onChange: e => setPersonalInfo(prev => ({\n              ...prev,\n              maxAmount: e.target.value\n            })),\n            className: styles.amountInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: styles.filterButton,\n            onClick: () => {\n              // Always start with the original subscriptions\n              let filtered = [...subscriptions];\n\n              // Apply user filter if it's active\n              if (PersonalInfo.selectedUser) {\n                filtered = filtered.filter(sub => String(sub.user_id) === String(PersonalInfo.selectedUser));\n              }\n\n              // Apply NGO filter if it's active\n              if (PersonalInfo.selectedNgo) {\n                filtered = filtered.filter(sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo));\n              }\n\n              // Apply min amount filter if provided\n              if (PersonalInfo.minAmount) {\n                const minValue = parseFloat(PersonalInfo.minAmount);\n                filtered = filtered.filter(sub => parseFloat(sub.amount) >= minValue);\n              }\n\n              // Apply max amount filter if provided\n              if (PersonalInfo.maxAmount) {\n                const maxValue = parseFloat(PersonalInfo.maxAmount);\n                filtered = filtered.filter(sub => parseFloat(sub.amount) <= maxValue);\n              }\n\n              // Determine if any filter is applied\n              const isAnyFilterApplied = PersonalInfo.selectedUser || PersonalInfo.selectedNgo || PersonalInfo.minAmount || PersonalInfo.maxAmount;\n\n              // Update state with filtered data\n              setPersonalInfo(prev => ({\n                ...prev,\n                filteredSubscriptions: isAnyFilterApplied ? filtered : null,\n                subscriptionsFiltered: !!isAnyFilterApplied,\n                amountFilterApplied: !!(PersonalInfo.minAmount || PersonalInfo.maxAmount)\n              }));\n            },\n            children: \"Filter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 662,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.filterRow,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: styles.cleanButton,\n            onClick: () => {\n              // Reset all filters\n              setPersonalInfo(prev => ({\n                ...prev,\n                selectedNgo: '',\n                minAmount: '',\n                maxAmount: '',\n                filteredSubscriptions: null,\n                subscriptionsFiltered: false,\n                amountFilterApplied: false\n              }));\n            },\n            children: \"Clean filters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 720,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 719,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 21\n      }, this), openSections.includes(1) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.tagInputContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Donations filters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 747,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.filterRow,\n          children: [\"Filter by NGO:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: PersonalInfo.selectedNgo || '',\n            onChange: e => setPersonalInfo(prev => ({\n              ...prev,\n              selectedNgo: e.target.value\n            })),\n            className: styles.Select,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select NGO\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 759,\n              columnNumber: 33\n            }, this), [...new Map(donations.map(sub => [sub.ngo_id, sub])).values()].sort((a, b) => a.ngo_name.localeCompare(b.ngo_name)).map(sub => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: sub.ngo_id,\n              children: sub.ngo_name\n            }, sub.ngo_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 765,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 751,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: styles.filterButton,\n            onClick: () => {\n              // Log selected value for debugging\n              console.log(\"Selected NGO ID:\", PersonalInfo.selectedNgo);\n              console.log(\"All donations:\", donations);\n              if (PersonalInfo.selectedNgo) {\n                // Show only subscriptions for the selected NGO\n                const filtered = donations.filter(sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo));\n                console.log(\"Filtered donations:\", filtered);\n                setPersonalInfo(prev => ({\n                  ...prev,\n                  filteredDonations: filtered,\n                  donationsFiltered: true\n                }));\n              } else {\n                // If no NGO selected or \"Select NGO\" is chosen, show all\n                setPersonalInfo(prev => ({\n                  ...prev,\n                  filteredDonations: donations,\n                  donationsFiltered: false\n                }));\n              }\n            },\n            children: \"Filter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 771,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.filterRow,\n          children: [\"Filter by user:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: PersonalInfo.selectedUser || '',\n            onChange: e => setPersonalInfo(prev => ({\n              ...prev,\n              selectedUser: e.target.value\n            })),\n            className: styles.Select,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select user\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 817,\n              columnNumber: 33\n            }, this), [...new Map(donations.map(sub => [sub.user_id, sub])).values()].sort((a, b) => String(a.user_id).localeCompare(String(b.user_id))).map(sub => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: sub.user_id,\n              children: sub.user_id\n            }, sub.user_id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 823,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 809,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: styles.filterButton,\n            onClick: () => {\n              // Always start with the original subscription list for user filtering\n              let filtered = [...donations];\n              if (PersonalInfo.selectedUser) {\n                // Filter by selected user_id\n                filtered = filtered.filter(sub => String(sub.user_id) === String(PersonalInfo.selectedUser));\n\n                // Re-apply other filters if they were active\n                if (PersonalInfo.minAmount) {\n                  filtered = filtered.filter(sub => parseFloat(sub.amount) >= parseFloat(PersonalInfo.minAmount));\n                }\n                if (PersonalInfo.maxAmount) {\n                  filtered = filtered.filter(sub => parseFloat(sub.amount) <= parseFloat(PersonalInfo.maxAmount));\n                }\n\n                // Apply NGO filter if active\n                if (PersonalInfo.selectedNgo) {\n                  filtered = filtered.filter(sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo));\n                }\n                setPersonalInfo(prev => ({\n                  ...prev,\n                  filteredDonations: filtered,\n                  donationsFiltered: true,\n                  userFilterApplied: true\n                }));\n              } else {\n                // If no user is selected, apply other filters if they exist\n                let resetFiltered = [...donations];\n\n                // Re-apply other filters\n                if (PersonalInfo.minAmount) {\n                  resetFiltered = resetFiltered.filter(sub => parseFloat(sub.amount) >= parseFloat(PersonalInfo.minAmount));\n                }\n                if (PersonalInfo.maxAmount) {\n                  resetFiltered = resetFiltered.filter(sub => parseFloat(sub.amount) <= parseFloat(PersonalInfo.maxAmount));\n                }\n\n                // Apply NGO filter if active\n                if (PersonalInfo.selectedNgo) {\n                  resetFiltered = resetFiltered.filter(sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo));\n                }\n                const stillFiltered = PersonalInfo.minAmount || PersonalInfo.maxAmount || PersonalInfo.selectedNgo;\n                setPersonalInfo(prev => ({\n                  ...prev,\n                  filteredDonations: stillFiltered ? resetFiltered : null,\n                  donationsFiltered: !!stillFiltered,\n                  userFilterApplied: false\n                }));\n              }\n            },\n            children: \"Filter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 829,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 807,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.filterRow,\n          children: [\"Filter by value:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Min amount\",\n            value: PersonalInfo.minAmount || '',\n            onChange: e => setPersonalInfo(prev => ({\n              ...prev,\n              minAmount: e.target.value\n            })),\n            className: styles.amountInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 911,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            placeholder: \"Max amount\",\n            value: PersonalInfo.maxAmount || '',\n            onChange: e => setPersonalInfo(prev => ({\n              ...prev,\n              maxAmount: e.target.value\n            })),\n            className: styles.amountInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 921,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: styles.filterButton,\n            onClick: () => {\n              // Always start with the original subscriptions\n              let filtered = [...donations];\n\n              // Apply user filter if it's active\n              if (PersonalInfo.selectedUser) {\n                filtered = filtered.filter(sub => String(sub.user_id) === String(PersonalInfo.selectedUser));\n              }\n\n              // Apply NGO filter if it's active\n              if (PersonalInfo.selectedNgo) {\n                filtered = filtered.filter(sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo));\n              }\n\n              // Apply min amount filter if provided\n              if (PersonalInfo.minAmount) {\n                const minValue = parseFloat(PersonalInfo.minAmount);\n                filtered = filtered.filter(sub => parseFloat(sub.amount) >= minValue);\n              }\n\n              // Apply max amount filter if provided\n              if (PersonalInfo.maxAmount) {\n                const maxValue = parseFloat(PersonalInfo.maxAmount);\n                filtered = filtered.filter(sub => parseFloat(sub.amount) <= maxValue);\n              }\n\n              // Determine if any filter is applied\n              const isAnyFilterApplied = PersonalInfo.selectedUser || PersonalInfo.selectedNgo || PersonalInfo.minAmount || PersonalInfo.maxAmount;\n\n              // Update state with filtered data\n              setPersonalInfo(prev => ({\n                ...prev,\n                filteredDonations: isAnyFilterApplied ? filtered : null,\n                donationsFiltered: !!isAnyFilterApplied,\n                amountFilterApplied: !!(PersonalInfo.minAmount || PersonalInfo.maxAmount)\n              }));\n            },\n            children: \"Filter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 931,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 909,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.filterRow,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: styles.cleanButton,\n            onClick: () => {\n              // Reset all filters\n              setPersonalInfo(prev => ({\n                ...prev,\n                selectedNgo: '',\n                minAmount: '',\n                maxAmount: '',\n                filteredDonations: null,\n                donationsFiltered: false,\n                amountFilterApplied: false\n              }));\n            },\n            children: \"Clean filters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 989,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 988,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 21\n      }, this), openSections.includes(2) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.tagInputContainer,\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Verifications filters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1016,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1015,\n        columnNumber: 21\n      }, this), openSections.includes(3) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.tagInputContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Tags options\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1025,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newTag,\n          onChange: e => setNewTag(e.target.value),\n          placeholder: \"Enter new tag\",\n          className: styles.tagInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1026,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: styles.addTagButton,\n          onClick: handleAddTag,\n          disabled: !newTag.trim(),\n          children: \"Add Tag\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1033,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1024,\n        columnNumber: 21\n      }, this), openSections.includes(4) && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.tagInputContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Actions filters\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1049,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.filterRow,\n          children: [\"Filter by action type:\", /*#__PURE__*/_jsxDEV(\"select\", {\n            value: PersonalInfo.selectedAction || '',\n            onChange: e => setPersonalInfo(prev => ({\n              ...prev,\n              selectedAction: e.target.value\n            })),\n            className: styles.Select,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              children: \"Select action type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1061,\n              columnNumber: 33\n            }, this), [...new Map(actions.map(action => [action.action_type, action])).values()].sort((a, b) => String(a.action_type).localeCompare(String(b.action_type))).map(action => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: action.action_type,\n              children: action.action_type\n            }, action.action_type, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1067,\n              columnNumber: 41\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1053,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: styles.filterButton,\n            onClick: () => {\n              // Log selected value for debugging\n              console.log(\"Selected NGO ID:\", PersonalInfo.selectedAction);\n              console.log(\"All actions:\", actions);\n              if (PersonalInfo.selectedAction) {\n                // Show only subscriptions for the selected NGO\n                const filtered = actions.filter(sub => String(sub.action_type) === String(PersonalInfo.selectedAction));\n                console.log(\"Filtered actions:\", filtered);\n                setPersonalInfo(prev => ({\n                  ...prev,\n                  filteredActions: filtered,\n                  actionsFiltered: true\n                }));\n              } else {\n                // If no NGO selected or \"Select NGO\" is chosen, show all\n                setPersonalInfo(prev => ({\n                  ...prev,\n                  filteredActions: actions,\n                  actionsFiltered: false\n                }));\n              }\n            },\n            children: \"Filter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1073,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1051,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.filterRow,\n          children: [\"Filter by date:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            placeholder: \"Begin date\",\n            value: PersonalInfo.beginDate || '',\n            onChange: e => setPersonalInfo(prev => ({\n              ...prev,\n              beginDate: e.target.value\n            })),\n            className: styles.amountInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1113,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            placeholder: \"End date\",\n            value: PersonalInfo.endDate || '',\n            onChange: e => setPersonalInfo(prev => ({\n              ...prev,\n              endDate: e.target.value\n            })),\n            className: styles.amountInput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1123,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: styles.filterButton,\n            onClick: () => {\n              // Always start with the original actions\n              let filtered = [...actions];\n\n              // Apply action type filter if it's active\n              if (PersonalInfo.selectedAction) {\n                filtered = filtered.filter(sub => String(sub.action_type) === String(PersonalInfo.selectedAction));\n              }\n\n              // Apply begin date filter if provided\n              if (PersonalInfo.beginDate) {\n                const beginDateObj = new Date(PersonalInfo.beginDate);\n                filtered = filtered.filter(sub => {\n                  const actionDate = new Date(sub.action_date);\n                  return actionDate >= beginDateObj;\n                });\n              }\n\n              // Apply end date filter if provided\n              if (PersonalInfo.endDate) {\n                const endDateObj = new Date(PersonalInfo.endDate);\n                // Add one day to include the end date fully\n                endDateObj.setDate(endDateObj.getDate() + 1);\n                filtered = filtered.filter(sub => {\n                  const actionDate = new Date(sub.action_date);\n                  return actionDate < endDateObj;\n                });\n              }\n\n              // Determine if any filter is applied\n              const isAnyFilterApplied = PersonalInfo.selectedAction || PersonalInfo.beginDate || PersonalInfo.endDate;\n\n              // Update state with filtered data\n              setPersonalInfo(prev => ({\n                ...prev,\n                filteredActions: isAnyFilterApplied ? filtered : null,\n                actionsFiltered: !!isAnyFilterApplied,\n                // Fixed typo: acitonsFiltered â†’ actionsFiltered\n                dateFilterApplied: !!(PersonalInfo.beginDate || PersonalInfo.endDate) // Changed from amountFilterApplied to dateFilterApplied for clarity\n              }));\n            },\n            children: \"Filter\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1133,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1111,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.filterRow,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: styles.cleanButton,\n            onClick: () => {\n              // Reset all filters\n              setPersonalInfo(prev => ({\n                ...prev,\n                selectedAction: '',\n                beginDate: '',\n                endDate: '',\n                filteredAction: null,\n                actionsFiltered: false,\n                amountFilterApplied: false\n              }));\n            },\n            children: \"Clean filters\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1187,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1186,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1048,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 13\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.page,\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1216,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.profileWrapper,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.leftSideBar,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.photoSection,\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: styles.profilePic,\n            src: PersonalInfo.image || \"ngo_icon.png\",\n            alt: \"Your image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1220,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            ref: fileInputRef,\n            onChange: handleFileChange,\n            style: {\n              display: \"none\"\n            },\n            accept: \"image/*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1225,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: styles.uploadButton,\n            onClick: handlePhotoClick,\n            children: \"Add picture\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1232,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1219,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.informationContainer,\n          children: renderPersonalInfo()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1240,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1218,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.rightSideBar,\n        children: displayedSections.map((section, index) => {\n          let data = [];\n          if (index === 0) data = PersonalInfo.subscriptionsFiltered ? PersonalInfo.filteredSubscriptions : subscriptions;\n          if (index === 1) data = PersonalInfo.donationsFiltered ? PersonalInfo.filteredDonations : donations;\n          if (index === 2) data = verifications;\n          if (index === 3) data = tags;\n          if (index === 4) data = PersonalInfo.actionsFiltered ? PersonalInfo.filteredActions : actions;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.accordionSection,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.accordionTitle,\n              onClick: () => toggleSection(index),\n              children: section.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1259,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `${styles.accordionContent} ${openSections.includes(index) ? styles.open : \"\"}`,\n              children: /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: data.length > 0 ? data.map((item, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                        children: item.ngo_name || item.username || item.name || item.tag || item.action_details + \" on \" + item.action_date || \"Unnamed\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 1274,\n                        columnNumber: 61\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1273,\n                      columnNumber: 57\n                    }, this), index === 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n                      children: \"NGO (id) affected:\" + item.ngo_id\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1277,\n                      columnNumber: 61\n                    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: {\n                        fontSize: '0.85rem',\n                        fontWeight: 'bold',\n                        color: item.status === 'active' ? 'green' : 'red'\n                      },\n                      children: item.status || \"\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1279,\n                      columnNumber: 57\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1272,\n                    columnNumber: 53\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      children: item.amount != null ? `${item.amount} â‚¬` : ''\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1290,\n                      columnNumber: 57\n                    }, this), index === 4 && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: styles.adminDisplay,\n                      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n                        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                          children: \"Admin (id): \" + item.admin_id\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1294,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                          children: \"Action id: \" + item.action_id\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 1297,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1292,\n                      columnNumber: 61\n                    }, this), index === 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: styles.itemButton,\n                      onClick: () => handleStatusChange(item.subscription_id, item.status, item.ngo_id),\n                      children: item.status === 'active' ? 'Cancel' : 'Activate'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1304,\n                      columnNumber: 61\n                    }, this), index === 1 && /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: styles.itemButton,\n                      onClick: () => handleReportDonation(item.subscription_id, item.status),\n                      children: 'Report'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1312,\n                      columnNumber: 61\n                    }, this), index === 2 && /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: styles.itemButton,\n                      onClick: () => handleRedirectVerification(item.ngo_id),\n                      children: 'To verification'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1320,\n                      columnNumber: 61\n                    }, this), index === 3 && /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: styles.itemButton,\n                      onClick: () => handleRemoveTag(item.tag_id, item.tag),\n                      children: 'Remove'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 1328,\n                      columnNumber: 61\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 1289,\n                    columnNumber: 53\n                  }, this)]\n                }, i, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1271,\n                  columnNumber: 49\n                }, this)) : /*#__PURE__*/_jsxDEV(\"li\", {\n                  children: \"Nothing yet\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1338,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1268,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1265,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1258,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1247,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1217,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1348,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1215,\n    columnNumber: 9\n  }, this);\n}\n_s(Admin, \"zvGtZ+rGsErtKeOyWqGP0jWyI/s=\");\n_c = Admin;\nexport default Admin;\nvar _c;\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Header","displayedSectionsAdmin","styles","jsxDEV","_jsxDEV","Fragment","_Fragment","Admin","_s","openSections","setOpenSections","PersonalInfo","setPersonalInfo","fileInputRef","newTag","setNewTag","fetchProfile","response","fetch","method","credentials","headers","data","json","console","log","error","alert","handlePhotoClick","current","click","handleFileChange","e","file","target","files","reader","FileReader","onload","imageBase64","result","res","body","JSON","stringify","ok","err","catch","Error","message","prev","image","readAsDataURL","toggleSection","index","includes","filter","i","handleAddTag","trim","tag","tags","setTimeout","window","dispatchEvent","Event","adminActionResponse","ngo_id","admin_id","adminId","action_type","action_details","actionErr","status","handleStatusChange","subscriptionId","currentStatus","ngoId","newStatus","confirmAction","confirm","updatedSubs","allSubscriptions","map","sub","subscription_id","updatedFiltered","filteredSubscriptions","isFiltered","handleReportDonation","donation_id","handleRedirectVerification","form","document","createElement","action","hiddenField","type","name","value","appendChild","submit","handleRemoveTag","tag_id","tag_name","updatedTags","Array","isArray","tagIdentifier","id","_id","newPersonalInfo","className","loadingWrapper","children","spinner","fileName","_jsxFileName","lineNumber","columnNumber","loadingText","user","displayedSections","subscriptions","donations","allDonations","actions","verifications","renderPersonalInfo","info","username","email","tagInputContainer","filterRow","selectedNgo","onChange","Select","Map","values","sort","a","b","ngo_name","localeCompare","filterButton","onClick","filtered","String","subscriptionsFiltered","selectedUser","user_id","minAmount","parseFloat","amount","maxAmount","userFilterApplied","resetFiltered","stillFiltered","placeholder","amountInput","minValue","maxValue","isAnyFilterApplied","amountFilterApplied","cleanButton","filteredDonations","donationsFiltered","tagInput","addTagButton","disabled","selectedAction","filteredActions","actionsFiltered","beginDate","endDate","beginDateObj","Date","actionDate","action_date","endDateObj","setDate","getDate","dateFilterApplied","filteredAction","page","profileWrapper","leftSideBar","photoSection","profilePic","src","alt","ref","style","display","accept","uploadButton","informationContainer","rightSideBar","section","accordionSection","accordionTitle","title","accordionContent","open","length","item","fontSize","fontWeight","color","adminDisplay","action_id","itemButton","_c","$RefreshReg$"],"sources":["/home/javi/Server/src/components/account/Admin.js"],"sourcesContent":["/*\r\n *  -- Admin.js --\r\n *\r\n *\r\n *\r\n */\r\n\r\nimport * as React from 'react';\r\nimport {useEffect, useRef, useState} from \"react\";\r\nimport Header from \"../reusable/Header\";\r\nimport {displayedSectionsAdmin} from \"../profile/displaySections\";\r\nimport styles from \"../../style/page/profile.module.css\";\r\n\r\nfunction Admin() {\r\n    const [openSections, setOpenSections] = useState([]);\r\n    const [PersonalInfo, setPersonalInfo] = useState(null);\r\n    const fileInputRef = useRef(null);\r\n    const [newTag, setNewTag] = useState('');\r\n\r\n    useEffect(() => {\r\n        const fetchProfile = async () => {\r\n            try {\r\n                const response = await fetch(\"/api/profile\", {\r\n                    method: \"GET\",\r\n                    credentials: \"include\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                    },\r\n                });\r\n                const data = await response.json();\r\n                console.log(data)\r\n                setPersonalInfo(data);\r\n            } catch (error) {\r\n                alert(\"Something went wrong, try again later\")\r\n            }\r\n        };\r\n        fetchProfile();\r\n    }, []);\r\n\r\n    const handlePhotoClick = () => {\r\n        fileInputRef.current.click();\r\n    };\r\n\r\n    const handleFileChange = (e) => {\r\n        const file = e.target.files[0];\r\n        if (!file) {\r\n            return alert(\"Wrong file â€” try again\");\r\n        }\r\n\r\n        // Use FileReader to get Base64\r\n        const reader = new FileReader();\r\n        reader.onload = async () => {\r\n            const imageBase64 = reader.result;\r\n\r\n            try {\r\n                const res = await fetch(\"http://localhost:5000/api/profile/image\", {\r\n                    method: \"POST\",\r\n                    credentials: \"include\",\r\n                    headers: {\"Content-Type\": \"application/json\"},\r\n                    body: JSON.stringify({imageBase64}),\r\n                });\r\n\r\n                if (!res.ok) {\r\n                    const err = await res.json().catch(() => ({}));\r\n                    throw new Error(err.message || \"Upload failed\");\r\n                }\r\n\r\n                const data = await res.json();\r\n                console.log(\"Upload successful:\", data);\r\n                alert(\"Upload successful\");\r\n                setPersonalInfo(prev => ({\r\n                    ...prev,\r\n                    image: imageBase64\r\n                }));\r\n            } catch (error) {\r\n                console.error(\"Error uploading image:\", error);\r\n                alert(\"Error uploading image: \" + error.message);\r\n            }\r\n        };\r\n\r\n        reader.readAsDataURL(file);\r\n    };\r\n\r\n    const toggleSection = (index) => {\r\n        setOpenSections((prev) =>\r\n            prev.includes(index)\r\n                ? prev.filter((i) => i !== index)\r\n                : [...prev, index]\r\n        );\r\n    };\r\n\r\n    // Add this function to handle adding a new tag\r\n    const handleAddTag = async () => {\r\n        if (newTag.trim()) {\r\n            try {\r\n                // API call to add a tag\r\n                const response = await fetch(\"/api/admin/tag\", {\r\n                    method: \"POST\",\r\n                    credentials: \"include\",\r\n                    headers: {\"Content-Type\": \"application/json\"},\r\n                    body: JSON.stringify({tag: newTag}),\r\n                });\r\n                const data = await response.json();\r\n\r\n                if (response.ok) {\r\n\r\n                    // Update local state to show the new tag\r\n                    setPersonalInfo(prev => ({\r\n                        ...prev,\r\n                        tags: [\r\n                            [...prev.tags[0], {tag: newTag, ...data}]\r\n                        ]\r\n                    }));\r\n\r\n                    // Clear the input\r\n                    setNewTag('');\r\n\r\n                    // Success alert\r\n                    alert(`Tag \"${newTag}\" has been successfully added!`);\r\n\r\n                    // Force a re-render of the accordion by adding a small delay\r\n                    setTimeout(() => {\r\n                        // This will trigger a re-render and potentially fix the accordion sizing\r\n                        setPersonalInfo(prev => ({...prev}));\r\n\r\n                        // Alternatively, you could dispatch a window resize event\r\n                        window.dispatchEvent(new Event('resize'));\r\n                    }, 100);\r\n\r\n                    // Log the admin action\r\n                    try {\r\n                        // Assuming admin_id and ngo_id are available in your component\r\n                        // You might need to adjust this based on your actual data structure\r\n                        const adminActionResponse = await fetch('/api/admin/actions', {\r\n                            method: 'POST',\r\n                            headers: {'Content-Type': 'application/json'},\r\n                            body: JSON.stringify({\r\n                                ngo_id: null, // Assuming this is available in your state\r\n                                admin_id: PersonalInfo.adminId, // Assuming this is available in your state\r\n                                action_type: 'tag_added',\r\n                                action_details: `New tag with name ${newTag} was added`\r\n                            })\r\n                        });\r\n\r\n                        if (!adminActionResponse.ok) {\r\n                            console.error('Failed to log admin action');\r\n                        }\r\n                    } catch (actionErr) {\r\n                        console.error('Error logging admin action:', actionErr);\r\n                        // Not alerting the user about this error since the main operation succeeded\r\n                    }\r\n                } else {\r\n                    // Handle specific error cases\r\n                    if (response.status === 409) {\r\n                        alert(`Error: Tag \"${newTag}\" already exists.`);\r\n                    } else {\r\n                        alert(`Error: ${data.message || \"Failed to add tag. Please try again.\"}`);\r\n                    }\r\n                }\r\n\r\n            } catch (err) {\r\n                console.error(err);\r\n                alert(\"Error adding tag\");\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    // Function to change the status of a subscription (active/canceled)\r\n    /* const handleStatusChange = async (subscriptionId, currentStatus, ngoId) => {\r\n         const newStatus = currentStatus === 'active' ? 'canceled' : 'active';\r\n\r\n         // Add confirmation dialog\r\n         const confirmAction = window.confirm(\r\n             `Are you sure you want to change this subscription status from \"${currentStatus}\" to \"${newStatus}\"?`\r\n         );\r\n\r\n         // Only proceed if the user confirms\r\n         if (!confirmAction) {\r\n             return; // Exit the function if user cancels\r\n         }\r\n\r\n         try {\r\n             const response = await fetch(`/api/admin/subscriptions/${subscriptionId}/status`, {\r\n                 method: \"PUT\",\r\n                 headers: { \"Content-Type\": \"application/json\" },\r\n                 body: JSON.stringify({ status: newStatus }),\r\n             });\r\n\r\n             if (response.ok) {\r\n                 // Update only that subscription's status locally\r\n                 setPersonalInfo(prev => {\r\n                     const updatedSubs = prev.allSubscriptions.map(sub =>\r\n                         sub.subscription_id === subscriptionId ? { ...sub, status: newStatus } : sub\r\n                     );\r\n                     return { ...prev, allSubscriptions: updatedSubs };\r\n                 });\r\n\r\n                 // Log the admin action\r\n                 try {\r\n                     // Assuming admin_id and ngo_id are available in your component\r\n                     // You might need to adjust this based on your actual data structure\r\n                     const adminActionResponse = await fetch('/api/admin/actions', {\r\n                         method: 'POST',\r\n                         headers: { 'Content-Type': 'application/json' },\r\n                         body: JSON.stringify({\r\n                             ngo_id: ngoId, // Assuming this is available in your state\r\n                             admin_id: PersonalInfo.adminId, // Assuming this is available in your state\r\n                             action_type: 'subscription_status_change',\r\n                             action_details: `Changed subscription ${subscriptionId} status from ${currentStatus} to ${newStatus}`\r\n                         })\r\n                     });\r\n\r\n                     if (!adminActionResponse.ok) {\r\n                         console.error('Failed to log admin action');\r\n                     }\r\n                 } catch (actionErr) {\r\n                     console.error('Error logging admin action:', actionErr);\r\n                     // Not alerting the user about this error since the main operation succeeded\r\n                 }\r\n\r\n             } else {\r\n                 alert(\"Failed to update subscription status\");\r\n             }\r\n         } catch (err) {\r\n             console.error(err);\r\n             alert(\"Error updating status\");\r\n         }\r\n     };*/\r\n\r\n    // Modified handleStatusChange function for the filtered list scenario\r\n    const handleStatusChange = async (subscriptionId, currentStatus, ngoId) => {\r\n        const newStatus = currentStatus === 'active' ? 'canceled' : 'active';\r\n\r\n        // Add confirmation dialog\r\n        const confirmAction = window.confirm(\r\n            `Are you sure you want to change this subscription status from \"${currentStatus}\" to \"${newStatus}\"?`\r\n        );\r\n\r\n        // Only proceed if the user confirms\r\n        if (!confirmAction) {\r\n            return; // Exit the function if user cancels\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`/api/admin/subscriptions/${subscriptionId}/status`, {\r\n                method: \"PUT\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({status: newStatus}),\r\n            });\r\n\r\n            if (response.ok) {\r\n                // Update state to reflect the status change in both original and filtered lists\r\n                setPersonalInfo(prev => {\r\n                    // Update in the original allSubscriptions array\r\n                    const updatedSubs = prev.allSubscriptions.map(sub =>\r\n                        sub.subscription_id === subscriptionId ? {...sub, status: newStatus} : sub\r\n                    );\r\n\r\n                    // If we have a filtered list, update it too\r\n                    let updatedFiltered = prev.filteredSubscriptions;\r\n                    if (prev.isFiltered && prev.filteredSubscriptions) {\r\n                        updatedFiltered = prev.filteredSubscriptions.map(sub =>\r\n                            sub.subscription_id === subscriptionId ? {...sub, status: newStatus} : sub\r\n                        );\r\n                    }\r\n\r\n                    return {\r\n                        ...prev,\r\n                        allSubscriptions: updatedSubs,\r\n                        filteredSubscriptions: updatedFiltered\r\n                    };\r\n                });\r\n\r\n                // Log the admin action\r\n                try {\r\n                    const adminActionResponse = await fetch('/api/admin/actions', {\r\n                        method: 'POST',\r\n                        headers: {'Content-Type': 'application/json'},\r\n                        body: JSON.stringify({\r\n                            ngo_id: ngoId,\r\n                            admin_id: PersonalInfo.adminId,\r\n                            action_type: 'subscription_status_change',\r\n                            action_details: `Changed subscription ${subscriptionId} status from ${currentStatus} to ${newStatus}`\r\n                        })\r\n                    });\r\n\r\n                    if (!adminActionResponse.ok) {\r\n                        console.error('Failed to log admin action');\r\n                    }\r\n                } catch (actionErr) {\r\n                    console.error('Error logging admin action:', actionErr);\r\n                }\r\n\r\n            } else {\r\n                alert(\"Failed to update subscription status\");\r\n            }\r\n        } catch (err) {\r\n            console.error(err);\r\n            alert(\"Error updating status\");\r\n        }\r\n    };\r\n\r\n    const handleReportDonation = async (donation_id) => {\r\n\r\n    }\r\n\r\n\r\n    const handleRedirectVerification = async (ngo_id) => {\r\n        try {\r\n            // Create a hidden form and submit it for a proper POST navigation\r\n            const form = document.createElement('form');\r\n            form.method = 'POST';\r\n            form.action = '/admin/verify-NGOs';\r\n\r\n            const hiddenField = document.createElement('input');\r\n            hiddenField.type = 'hidden';\r\n            hiddenField.name = 'ngo_id';\r\n            hiddenField.value = ngo_id;\r\n\r\n            form.appendChild(hiddenField);\r\n            document.body.appendChild(form);\r\n            form.submit();\r\n        } catch (err) {\r\n            console.error(\"Error redirecting to verification:\", err);\r\n            alert(\"Error navigating to verification page. Please try again.\");\r\n        }\r\n    };\r\n\r\n\r\n    const handleRemoveTag = async (tag_id, tag_name) => {\r\n        // Add confirmation dialog\r\n        const confirmAction = window.confirm(\r\n            \"Are you sure you want to delete this tag?\"\r\n        );\r\n\r\n        // Only proceed if the user confirms\r\n        if (!confirmAction) {\r\n            return; // Exit the function if user cancels\r\n        }\r\n\r\n        try {\r\n            const response = await fetch(`/api/admin/delete-tag`, {\r\n                method: \"POST\",\r\n                headers: {\"Content-Type\": \"application/json\"},\r\n                body: JSON.stringify({tag_id: tag_id}),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (response.ok) {\r\n\r\n                // Force a complete refresh of profile data\r\n                // NOTE: Use this as a last resource if the stupid list of tags is not updating  after removal\r\n                /*\r\n                try {\r\n                    const profileResponse = await fetch(\"/api/profile\", {\r\n                        method: \"GET\",\r\n                        credentials: \"include\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\",\r\n                        },\r\n                    });\r\n\r\n                    if (profileResponse.ok) {\r\n                        const updatedData = await profileResponse.json();\r\n                        setPersonalInfo(updatedData);\r\n                        console.log(\"Profile data refreshed after tag deletion\");\r\n                    } else {\r\n                        console.error(\"Failed to refresh profile data\");\r\n                    }\r\n\r\n                } catch (refreshError) {\r\n                    console.error(\"Error refreshing data:\", refreshError);\r\n                }*/\r\n\r\n                // If deletion was successful, manually update the UI\r\n                // Force a full component refresh by creating a new copy of PersonalInfo\r\n                const updatedTags = [...PersonalInfo.tags];\r\n\r\n                // Filter out the deleted tag\r\n                if (Array.isArray(updatedTags[0])) {\r\n                    updatedTags[0] = updatedTags[0].filter(tag => {\r\n                        // Try to accommodate different ID field names\r\n                        const tagIdentifier = tag.id || tag._id || tag.tag_id;\r\n                        return tagIdentifier !== tag_id;\r\n                    });\r\n                }\r\n\r\n                console.log(\"Tags after filtering:\", updatedTags);\r\n\r\n                // Create a completely new copy of the state to ensure React detects changes\r\n                const newPersonalInfo = {\r\n                    ...PersonalInfo,\r\n                    tags: updatedTags\r\n                };\r\n\r\n                console.log(\"New PersonalInfo:\", newPersonalInfo);\r\n\r\n                // Update the state with the new object\r\n                setPersonalInfo(newPersonalInfo);\r\n\r\n\r\n                // Success alert\r\n                alert(\"Tag has been successfully deleted!\");\r\n\r\n                // Log the admin action if you want to track this\r\n                try {\r\n                    await fetch('/api/admin/actions', {\r\n                        method: 'POST',\r\n                        headers: {'Content-Type': 'application/json'},\r\n                        credentials: \"include\",\r\n                        body: JSON.stringify({\r\n                            admin_id: PersonalInfo.adminId,\r\n                            action_type: 'tag_deleted',\r\n                            action_details: `Deleted tag with ID ${tag_id}, and name ${tag_name}`\r\n                        })\r\n                    });\r\n\r\n\r\n                } catch (actionErr) {\r\n                    console.error('Error logging admin action:', actionErr);\r\n                    // Not alerting the user about this error since the main operation succeeded\r\n                }\r\n            } else {\r\n                // Handle specific error cases\r\n                if (response.status === 409) {\r\n                    alert(\"Cannot delete this tag as it is currently in use by one or more NGOs.\");\r\n                } else if (response.status === 404) {\r\n                    alert(\"Tag not found. It may have been already deleted.\");\r\n\r\n                    // Still update the UI to remove it if it was somehow still in the UI\r\n                    setPersonalInfo(prev => ({\r\n                        ...prev,\r\n                        tags: [\r\n                            prev.tags[0].filter(tag => tag.id !== tag_id)\r\n                        ]\r\n                    }));\r\n                } else {\r\n                    alert(`Error: ${data.message || \"Failed to delete tag.\"}`);\r\n                }\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error deleting tag:\", err);\r\n            alert(\"Network error: Could not connect to the server. Please check your connection and try again.\");\r\n        }\r\n\r\n    };\r\n\r\n\r\n    if (!PersonalInfo) {\r\n        return (\r\n            <div className={styles.loadingWrapper}>\r\n                <div className={styles.spinner}></div>\r\n                <p className={styles.loadingText}>Loading profile data...</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    const user = PersonalInfo.user || {};\r\n    const displayedSections = displayedSectionsAdmin;\r\n    const subscriptions = PersonalInfo.allSubscriptions || [];\r\n    const donations = PersonalInfo.allDonations || [];\r\n    const actions = PersonalInfo.actions || [];\r\n    const tags = PersonalInfo.tags[0] || [];\r\n    const verifications = PersonalInfo.verifications || [];\r\n\r\n    const renderPersonalInfo = () => {\r\n        return (\r\n            <div className={styles.info}>\r\n                <h2>{user.username || \"Unnamed admin\"}</h2>\r\n                <p>Email: {user.email || \"No email provided\"}</p>\r\n\r\n                {/* SUBSCRIPTIONS CONTROLS */}\r\n                {/* Only show tag input and button when subscriptions section (index 0) is open */}\r\n                {openSections.includes(0) && (\r\n                    <div className={styles.tagInputContainer}>\r\n                        <h4>Subscriptions filters</h4>\r\n                        {/* First row */}\r\n                        <div className={styles.filterRow}>\r\n                            Filter by NGO:\r\n                            <select\r\n                                value={PersonalInfo.selectedNgo || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    selectedNgo: e.target.value\r\n                                }))}\r\n                                className={styles.Select}\r\n                            >\r\n                                <option value=\"\">Select NGO</option>\r\n                                {/* Create a unique list of NGOs sorted alphabetically */}\r\n                                {[...new Map(subscriptions.map(sub => [sub.ngo_id, sub]))\r\n                                    .values()]\r\n                                    .sort((a, b) => a.ngo_name.localeCompare(b.ngo_name))\r\n                                    .map(sub => (\r\n                                        <option key={sub.ngo_id} value={sub.ngo_id}>\r\n                                            {sub.ngo_name}\r\n                                        </option>\r\n                                    ))\r\n                                }\r\n                            </select>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.filterButton}\r\n                                onClick={() => {\r\n                                    // Log selected value for debugging\r\n                                    console.log(\"Selected NGO ID:\", PersonalInfo.selectedNgo);\r\n                                    console.log(\"All subscriptions:\", subscriptions);\r\n\r\n                                    if (PersonalInfo.selectedNgo) {\r\n                                        // Show only subscriptions for the selected NGO\r\n                                        const filtered = subscriptions.filter(\r\n                                            sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo)\r\n                                        );\r\n\r\n                                        console.log(\"Filtered subscriptions:\", filtered);\r\n\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredSubscriptions: filtered,\r\n                                            subscriptionsFiltered: true\r\n                                        }));\r\n                                    } else {\r\n                                        // If no NGO selected or \"Select NGO\" is chosen, show all\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredSubscriptions: subscriptions,\r\n                                            subscriptionsFiltered: false\r\n                                        }));\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Filter\r\n\r\n                            </button>\r\n                        </div>\r\n                        {/* Second row */}\r\n                        <div className={styles.filterRow}>\r\n                            Filter by user:\r\n                            <select\r\n                                value={PersonalInfo.selectedUser || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    selectedUser: e.target.value\r\n                                }))}\r\n                                className={styles.Select}\r\n                            >\r\n                                <option value=\"\">Select user</option>\r\n                                {/* Create a unique list of NGOs sorted alphabetically */}\r\n                                {[...new Map(subscriptions.map(sub => [sub.user_id, sub]))\r\n                                    .values()]\r\n                                    .sort((a, b) => String(a.user_id).localeCompare(String(b.user_id)))\r\n                                    .map(sub => (\r\n                                        <option key={sub.user_id} value={sub.user_id}>\r\n                                            {sub.user_id}\r\n                                        </option>\r\n                                    ))\r\n                                }\r\n                            </select>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.filterButton}\r\n                                onClick={() => {\r\n                                    // Always start with the original subscription list for user filtering\r\n                                    let filtered = [...subscriptions];\r\n\r\n                                    if (PersonalInfo.selectedUser) {\r\n                                        // Filter by selected user_id\r\n                                        filtered = filtered.filter(\r\n                                            sub => String(sub.user_id) === String(PersonalInfo.selectedUser)\r\n                                        );\r\n\r\n                                        // Re-apply other filters if they were active\r\n                                        if (PersonalInfo.minAmount) {\r\n                                            filtered = filtered.filter(sub =>\r\n                                                parseFloat(sub.amount) >= parseFloat(PersonalInfo.minAmount)\r\n                                            );\r\n                                        }\r\n\r\n                                        if (PersonalInfo.maxAmount) {\r\n                                            filtered = filtered.filter(sub =>\r\n                                                parseFloat(sub.amount) <= parseFloat(PersonalInfo.maxAmount)\r\n                                            );\r\n                                        }\r\n\r\n                                        // Apply NGO filter if active\r\n                                        if (PersonalInfo.selectedNgo) {\r\n                                            filtered = filtered.filter(\r\n                                                sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo)\r\n                                            );\r\n                                        }\r\n\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredSubscriptions: filtered,\r\n                                            subscriptionsFiltered: true,\r\n                                            userFilterApplied: true\r\n                                        }));\r\n                                    } else {\r\n                                        // If no user is selected, apply other filters if they exist\r\n                                        let resetFiltered = [...subscriptions];\r\n\r\n                                        // Re-apply other filters\r\n                                        if (PersonalInfo.minAmount) {\r\n                                            resetFiltered = resetFiltered.filter(sub =>\r\n                                                parseFloat(sub.amount) >= parseFloat(PersonalInfo.minAmount)\r\n                                            );\r\n                                        }\r\n\r\n                                        if (PersonalInfo.maxAmount) {\r\n                                            resetFiltered = resetFiltered.filter(sub =>\r\n                                                parseFloat(sub.amount) <= parseFloat(PersonalInfo.maxAmount)\r\n                                            );\r\n                                        }\r\n\r\n                                        // Apply NGO filter if active\r\n                                        if (PersonalInfo.selectedNgo) {\r\n                                            resetFiltered = resetFiltered.filter(\r\n                                                sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo)\r\n                                            );\r\n                                        }\r\n\r\n                                        const stillFiltered = PersonalInfo.minAmount ||\r\n                                            PersonalInfo.maxAmount ||\r\n                                            PersonalInfo.selectedNgo;\r\n\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredSubscriptions: stillFiltered ? resetFiltered : null,\r\n                                            subscriptionsFiltered: !!stillFiltered,\r\n                                            userFilterApplied: false\r\n                                        }));\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Filter\r\n                            </button>\r\n                        </div>\r\n                        {/* Third row */}\r\n                        <div className={styles.filterRow}>\r\n                            Filter by value:\r\n                            <input\r\n                                type=\"number\"\r\n                                placeholder=\"Min amount\"\r\n                                value={PersonalInfo.minAmount || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    minAmount: e.target.value\r\n                                }))}\r\n                                className={styles.amountInput}\r\n                            />\r\n                            <input\r\n                                type=\"number\"\r\n                                placeholder=\"Max amount\"\r\n                                value={PersonalInfo.maxAmount || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    maxAmount: e.target.value\r\n                                }))}\r\n                                className={styles.amountInput}\r\n                            />\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.filterButton}\r\n                                onClick={() => {\r\n                                    // Always start with the original subscriptions\r\n                                    let filtered = [...subscriptions];\r\n\r\n                                    // Apply user filter if it's active\r\n                                    if (PersonalInfo.selectedUser) {\r\n                                        filtered = filtered.filter(\r\n                                            sub => String(sub.user_id) === String(PersonalInfo.selectedUser)\r\n                                        );\r\n                                    }\r\n\r\n                                    // Apply NGO filter if it's active\r\n                                    if (PersonalInfo.selectedNgo) {\r\n                                        filtered = filtered.filter(\r\n                                            sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo)\r\n                                        );\r\n                                    }\r\n\r\n                                    // Apply min amount filter if provided\r\n                                    if (PersonalInfo.minAmount) {\r\n                                        const minValue = parseFloat(PersonalInfo.minAmount);\r\n                                        filtered = filtered.filter(sub =>\r\n                                            parseFloat(sub.amount) >= minValue\r\n                                        );\r\n                                    }\r\n\r\n                                    // Apply max amount filter if provided\r\n                                    if (PersonalInfo.maxAmount) {\r\n                                        const maxValue = parseFloat(PersonalInfo.maxAmount);\r\n                                        filtered = filtered.filter(sub =>\r\n                                            parseFloat(sub.amount) <= maxValue\r\n                                        );\r\n                                    }\r\n\r\n                                    // Determine if any filter is applied\r\n                                    const isAnyFilterApplied = PersonalInfo.selectedUser ||\r\n                                        PersonalInfo.selectedNgo ||\r\n                                        PersonalInfo.minAmount ||\r\n                                        PersonalInfo.maxAmount;\r\n\r\n                                    // Update state with filtered data\r\n                                    setPersonalInfo(prev => ({\r\n                                        ...prev,\r\n                                        filteredSubscriptions: isAnyFilterApplied ? filtered : null,\r\n                                        subscriptionsFiltered: !!isAnyFilterApplied,\r\n                                        amountFilterApplied: !!(PersonalInfo.minAmount || PersonalInfo.maxAmount)\r\n                                    }));\r\n\r\n                                }}\r\n                            >\r\n                                Filter\r\n                            </button>\r\n                        </div>\r\n                        {/* Third row */}\r\n                        <div className={styles.filterRow}>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.cleanButton}\r\n                                onClick={() => {\r\n                                    // Reset all filters\r\n                                    setPersonalInfo(prev => ({\r\n                                        ...prev,\r\n                                        selectedNgo: '',\r\n                                        minAmount: '',\r\n                                        maxAmount: '',\r\n                                        filteredSubscriptions: null,\r\n                                        subscriptionsFiltered: false,\r\n                                        amountFilterApplied: false\r\n                                    }));\r\n                                }}\r\n                            >\r\n                                Clean filters\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* DONATIONS CONTROL */}\r\n                {/* Only show tag input and button when donations section (index 1) is open */}\r\n\r\n                {openSections.includes(1) && (\r\n                    <div className={styles.tagInputContainer}>\r\n                        <h4>Donations filters</h4>\r\n                        {/* First row */}\r\n                        <div className={styles.filterRow}>\r\n                            Filter by NGO:\r\n                            <select\r\n                                value={PersonalInfo.selectedNgo || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    selectedNgo: e.target.value\r\n                                }))}\r\n                                className={styles.Select}\r\n                            >\r\n                                <option value=\"\">Select NGO</option>\r\n                                {/* Create a unique list of NGOs sorted alphabetically */}\r\n                                {[...new Map(donations.map(sub => [sub.ngo_id, sub]))\r\n                                    .values()]\r\n                                    .sort((a, b) => a.ngo_name.localeCompare(b.ngo_name))\r\n                                    .map(sub => (\r\n                                        <option key={sub.ngo_id} value={sub.ngo_id}>\r\n                                            {sub.ngo_name}\r\n                                        </option>\r\n                                    ))\r\n                                }\r\n                            </select>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.filterButton}\r\n                                onClick={() => {\r\n                                    // Log selected value for debugging\r\n                                    console.log(\"Selected NGO ID:\", PersonalInfo.selectedNgo);\r\n                                    console.log(\"All donations:\", donations);\r\n\r\n                                    if (PersonalInfo.selectedNgo) {\r\n                                        // Show only subscriptions for the selected NGO\r\n                                        const filtered = donations.filter(\r\n                                            sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo)\r\n                                        );\r\n\r\n                                        console.log(\"Filtered donations:\", filtered);\r\n\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredDonations: filtered,\r\n                                            donationsFiltered: true\r\n                                        }));\r\n                                    } else {\r\n                                        // If no NGO selected or \"Select NGO\" is chosen, show all\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredDonations: donations,\r\n                                            donationsFiltered: false\r\n                                        }));\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Filter\r\n\r\n                            </button>\r\n                        </div>\r\n                        {/* Second row */}\r\n                        <div className={styles.filterRow}>\r\n                            Filter by user:\r\n                            <select\r\n                                value={PersonalInfo.selectedUser || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    selectedUser: e.target.value\r\n                                }))}\r\n                                className={styles.Select}\r\n                            >\r\n                                <option value=\"\">Select user</option>\r\n                                {/* Create a unique list of NGOs sorted alphabetically */}\r\n                                {[...new Map(donations.map(sub => [sub.user_id, sub]))\r\n                                    .values()]\r\n                                    .sort((a, b) => String(a.user_id).localeCompare(String(b.user_id)))\r\n                                    .map(sub => (\r\n                                        <option key={sub.user_id} value={sub.user_id}>\r\n                                            {sub.user_id}\r\n                                        </option>\r\n                                    ))\r\n                                }\r\n                            </select>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.filterButton}\r\n                                onClick={() => {\r\n                                    // Always start with the original subscription list for user filtering\r\n                                    let filtered = [...donations];\r\n\r\n                                    if (PersonalInfo.selectedUser) {\r\n                                        // Filter by selected user_id\r\n                                        filtered = filtered.filter(\r\n                                            sub => String(sub.user_id) === String(PersonalInfo.selectedUser)\r\n                                        );\r\n\r\n                                        // Re-apply other filters if they were active\r\n                                        if (PersonalInfo.minAmount) {\r\n                                            filtered = filtered.filter(sub =>\r\n                                                parseFloat(sub.amount) >= parseFloat(PersonalInfo.minAmount)\r\n                                            );\r\n                                        }\r\n\r\n                                        if (PersonalInfo.maxAmount) {\r\n                                            filtered = filtered.filter(sub =>\r\n                                                parseFloat(sub.amount) <= parseFloat(PersonalInfo.maxAmount)\r\n                                            );\r\n                                        }\r\n\r\n                                        // Apply NGO filter if active\r\n                                        if (PersonalInfo.selectedNgo) {\r\n                                            filtered = filtered.filter(\r\n                                                sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo)\r\n                                            );\r\n                                        }\r\n\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredDonations: filtered,\r\n                                            donationsFiltered: true,\r\n                                            userFilterApplied: true\r\n                                        }));\r\n                                    } else {\r\n                                        // If no user is selected, apply other filters if they exist\r\n                                        let resetFiltered = [...donations];\r\n\r\n                                        // Re-apply other filters\r\n                                        if (PersonalInfo.minAmount) {\r\n                                            resetFiltered = resetFiltered.filter(sub =>\r\n                                                parseFloat(sub.amount) >= parseFloat(PersonalInfo.minAmount)\r\n                                            );\r\n                                        }\r\n\r\n                                        if (PersonalInfo.maxAmount) {\r\n                                            resetFiltered = resetFiltered.filter(sub =>\r\n                                                parseFloat(sub.amount) <= parseFloat(PersonalInfo.maxAmount)\r\n                                            );\r\n                                        }\r\n\r\n                                        // Apply NGO filter if active\r\n                                        if (PersonalInfo.selectedNgo) {\r\n                                            resetFiltered = resetFiltered.filter(\r\n                                                sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo)\r\n                                            );\r\n                                        }\r\n\r\n                                        const stillFiltered = PersonalInfo.minAmount ||\r\n                                            PersonalInfo.maxAmount ||\r\n                                            PersonalInfo.selectedNgo;\r\n\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredDonations: stillFiltered ? resetFiltered : null,\r\n                                            donationsFiltered: !!stillFiltered,\r\n                                            userFilterApplied: false\r\n                                        }));\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Filter\r\n                            </button>\r\n                        </div>\r\n                        {/* Third row */}\r\n                        <div className={styles.filterRow}>\r\n                            Filter by value:\r\n                            <input\r\n                                type=\"number\"\r\n                                placeholder=\"Min amount\"\r\n                                value={PersonalInfo.minAmount || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    minAmount: e.target.value\r\n                                }))}\r\n                                className={styles.amountInput}\r\n                            />\r\n                            <input\r\n                                type=\"number\"\r\n                                placeholder=\"Max amount\"\r\n                                value={PersonalInfo.maxAmount || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    maxAmount: e.target.value\r\n                                }))}\r\n                                className={styles.amountInput}\r\n                            />\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.filterButton}\r\n                                onClick={() => {\r\n                                    // Always start with the original subscriptions\r\n                                    let filtered = [...donations];\r\n\r\n                                    // Apply user filter if it's active\r\n                                    if (PersonalInfo.selectedUser) {\r\n                                        filtered = filtered.filter(\r\n                                            sub => String(sub.user_id) === String(PersonalInfo.selectedUser)\r\n                                        );\r\n                                    }\r\n\r\n                                    // Apply NGO filter if it's active\r\n                                    if (PersonalInfo.selectedNgo) {\r\n                                        filtered = filtered.filter(\r\n                                            sub => String(sub.ngo_id) === String(PersonalInfo.selectedNgo)\r\n                                        );\r\n                                    }\r\n\r\n                                    // Apply min amount filter if provided\r\n                                    if (PersonalInfo.minAmount) {\r\n                                        const minValue = parseFloat(PersonalInfo.minAmount);\r\n                                        filtered = filtered.filter(sub =>\r\n                                            parseFloat(sub.amount) >= minValue\r\n                                        );\r\n                                    }\r\n\r\n                                    // Apply max amount filter if provided\r\n                                    if (PersonalInfo.maxAmount) {\r\n                                        const maxValue = parseFloat(PersonalInfo.maxAmount);\r\n                                        filtered = filtered.filter(sub =>\r\n                                            parseFloat(sub.amount) <= maxValue\r\n                                        );\r\n                                    }\r\n\r\n                                    // Determine if any filter is applied\r\n                                    const isAnyFilterApplied = PersonalInfo.selectedUser ||\r\n                                        PersonalInfo.selectedNgo ||\r\n                                        PersonalInfo.minAmount ||\r\n                                        PersonalInfo.maxAmount;\r\n\r\n                                    // Update state with filtered data\r\n                                    setPersonalInfo(prev => ({\r\n                                        ...prev,\r\n                                        filteredDonations: isAnyFilterApplied ? filtered : null,\r\n                                        donationsFiltered: !!isAnyFilterApplied,\r\n                                        amountFilterApplied: !!(PersonalInfo.minAmount || PersonalInfo.maxAmount)\r\n                                    }));\r\n\r\n                                }}\r\n                            >\r\n                                Filter\r\n                            </button>\r\n                        </div>\r\n                        {/* Fourth row */}\r\n                        <div className={styles.filterRow}>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.cleanButton}\r\n                                onClick={() => {\r\n                                    // Reset all filters\r\n                                    setPersonalInfo(prev => ({\r\n                                        ...prev,\r\n                                        selectedNgo: '',\r\n                                        minAmount: '',\r\n                                        maxAmount: '',\r\n                                        filteredDonations: null,\r\n                                        donationsFiltered: false,\r\n                                        amountFilterApplied: false\r\n                                    }));\r\n                                }}\r\n                            >\r\n                                Clean filters\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {/* PENDING VERIFICATIONS */}\r\n                {/* Only show tag input and button when verifications section (index 2) is open */}\r\n\r\n                {openSections.includes(2) && (\r\n                    <div className={styles.tagInputContainer}>\r\n                        <h4>Verifications filters</h4>\r\n\r\n                    </div>\r\n                )}\r\n\r\n                {/* ALL TAGS */}\r\n                {/* Only show tag input and button when tags section (index 3) is open */}\r\n                {openSections.includes(3) && (\r\n                    <div className={styles.tagInputContainer}>\r\n                        <h4>Tags options</h4>\r\n                        <input\r\n                            type=\"text\"\r\n                            value={newTag}\r\n                            onChange={(e) => setNewTag(e.target.value)}\r\n                            placeholder=\"Enter new tag\"\r\n                            className={styles.tagInput}\r\n                        />\r\n                        <button\r\n                            type=\"button\"\r\n                            className={styles.addTagButton}\r\n                            onClick={handleAddTag}\r\n                            disabled={!newTag.trim()}\r\n                        >\r\n                            Add Tag\r\n                        </button>\r\n                    </div>\r\n                )}\r\n\r\n                {/* ALL ACTIONS */}\r\n                {/* Only show tag input and button when actions section (index 4) is open */}\r\n\r\n                {openSections.includes(4) && (\r\n                    <div className={styles.tagInputContainer}>\r\n                        <h4>Actions filters</h4>\r\n                        {/* First row */}\r\n                        <div className={styles.filterRow}>\r\n                            Filter by action type:\r\n                            <select\r\n                                value={PersonalInfo.selectedAction || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    selectedAction: e.target.value\r\n                                }))}\r\n                                className={styles.Select}\r\n                            >\r\n                                <option value=\"\">Select action type</option>\r\n                                {/* Create a unique list of action types sorted alphabetically */}\r\n                                {[...new Map(actions.map(action => [action.action_type, action]))\r\n                                    .values()]\r\n                                    .sort((a, b) => String(a.action_type).localeCompare(String(b.action_type)))\r\n                                    .map(action => (\r\n                                        <option key={action.action_type} value={action.action_type}>\r\n                                            {action.action_type}\r\n                                        </option>\r\n                                    ))\r\n                                }\r\n                            </select>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.filterButton}\r\n                                onClick={() => {\r\n                                    // Log selected value for debugging\r\n                                    console.log(\"Selected NGO ID:\", PersonalInfo.selectedAction);\r\n                                    console.log(\"All actions:\", actions);\r\n\r\n                                    if (PersonalInfo.selectedAction) {\r\n                                        // Show only subscriptions for the selected NGO\r\n                                        const filtered = actions.filter(\r\n                                            sub => String(sub.action_type) === String(PersonalInfo.selectedAction)\r\n                                        );\r\n\r\n                                        console.log(\"Filtered actions:\", filtered);\r\n\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredActions: filtered,\r\n                                            actionsFiltered: true\r\n                                        }));\r\n                                    } else {\r\n                                        // If no NGO selected or \"Select NGO\" is chosen, show all\r\n                                        setPersonalInfo(prev => ({\r\n                                            ...prev,\r\n                                            filteredActions: actions,\r\n                                            actionsFiltered: false\r\n                                        }));\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Filter\r\n\r\n                            </button>\r\n                        </div>\r\n                        {/* Second row */}\r\n\r\n                        {/* Third row */}\r\n                        <div className={styles.filterRow}>\r\n                            Filter by date:\r\n                            <input\r\n                                type=\"date\"\r\n                                placeholder=\"Begin date\"\r\n                                value={PersonalInfo.beginDate || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    beginDate: e.target.value\r\n                                }))}\r\n                                className={styles.amountInput}\r\n                            />\r\n                            <input\r\n                                type=\"date\"\r\n                                placeholder=\"End date\"\r\n                                value={PersonalInfo.endDate || ''}\r\n                                onChange={(e) => setPersonalInfo(prev => ({\r\n                                    ...prev,\r\n                                    endDate: e.target.value\r\n                                }))}\r\n                                className={styles.amountInput}\r\n                            />\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.filterButton}\r\n                                onClick={() => {\r\n                                    // Always start with the original actions\r\n                                    let filtered = [...actions];\r\n\r\n                                    // Apply action type filter if it's active\r\n                                    if (PersonalInfo.selectedAction) {\r\n                                        filtered = filtered.filter(\r\n                                            sub => String(sub.action_type) === String(PersonalInfo.selectedAction)\r\n                                        );\r\n                                    }\r\n\r\n                                    // Apply begin date filter if provided\r\n                                    if (PersonalInfo.beginDate) {\r\n                                        const beginDateObj = new Date(PersonalInfo.beginDate);\r\n                                        filtered = filtered.filter(sub => {\r\n                                            const actionDate = new Date(sub.action_date);\r\n                                            return actionDate >= beginDateObj;\r\n                                        });\r\n                                    }\r\n\r\n                                    // Apply end date filter if provided\r\n                                    if (PersonalInfo.endDate) {\r\n                                        const endDateObj = new Date(PersonalInfo.endDate);\r\n                                        // Add one day to include the end date fully\r\n                                        endDateObj.setDate(endDateObj.getDate() + 1);\r\n                                        filtered = filtered.filter(sub => {\r\n                                            const actionDate = new Date(sub.action_date);\r\n                                            return actionDate < endDateObj;\r\n                                        });\r\n                                    }\r\n\r\n                                    // Determine if any filter is applied\r\n                                    const isAnyFilterApplied = PersonalInfo.selectedAction ||\r\n                                        PersonalInfo.beginDate ||\r\n                                        PersonalInfo.endDate;\r\n\r\n                                    // Update state with filtered data\r\n                                    setPersonalInfo(prev => ({\r\n                                        ...prev,\r\n                                        filteredActions: isAnyFilterApplied ? filtered : null,\r\n                                        actionsFiltered: !!isAnyFilterApplied, // Fixed typo: acitonsFiltered â†’ actionsFiltered\r\n                                        dateFilterApplied: !!(PersonalInfo.beginDate || PersonalInfo.endDate) // Changed from amountFilterApplied to dateFilterApplied for clarity\r\n                                    }));\r\n                                }}\r\n                            >\r\n                                Filter\r\n                            </button>\r\n                        </div>\r\n\r\n                        {/* Fourth row */}\r\n                        <div className={styles.filterRow}>\r\n                            <button\r\n                                type=\"button\"\r\n                                className={styles.cleanButton}\r\n                                onClick={() => {\r\n                                    // Reset all filters\r\n                                    setPersonalInfo(prev => ({\r\n                                        ...prev,\r\n                                        selectedAction: '',\r\n                                        beginDate: '',\r\n                                        endDate: '',\r\n                                        filteredAction: null,\r\n                                        actionsFiltered: false,\r\n                                        amountFilterApplied: false\r\n                                    }));\r\n                                }}\r\n                            >\r\n                                Clean filters\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className={styles.page}>\r\n            <Header/>\r\n            <div className={styles.profileWrapper}>\r\n                <div className={styles.leftSideBar}>\r\n                    <div className={styles.photoSection}>\r\n                        <img\r\n                            className={styles.profilePic}\r\n                            src={PersonalInfo.image || \"ngo_icon.png\"}\r\n                            alt=\"Your image\"\r\n                        />\r\n                        <input\r\n                            type=\"file\"\r\n                            ref={fileInputRef}\r\n                            onChange={handleFileChange}\r\n                            style={{display: \"none\"}}\r\n                            accept=\"image/*\"\r\n                        />\r\n                        <button\r\n                            type=\"button\"\r\n                            className={styles.uploadButton}\r\n                            onClick={handlePhotoClick}\r\n                        >\r\n                            Add picture\r\n                        </button>\r\n                    </div>\r\n                    <div className={styles.informationContainer}>\r\n                        {renderPersonalInfo()}\r\n                    </div>\r\n\r\n\r\n                </div>\r\n\r\n                <div className={styles.rightSideBar}>\r\n                    {displayedSections.map((section, index) => {\r\n                        let data = [];\r\n\r\n                        if (index === 0) data = PersonalInfo.subscriptionsFiltered ? PersonalInfo.filteredSubscriptions : subscriptions;\r\n                        if (index === 1) data = PersonalInfo.donationsFiltered ? PersonalInfo.filteredDonations : donations;\r\n                        if (index === 2) data = verifications;\r\n                        if (index === 3) data = tags;\r\n                        if (index === 4) data = PersonalInfo.actionsFiltered ? PersonalInfo.filteredActions : actions;\r\n\r\n                        return (\r\n                            <div className={styles.accordionSection} key={index}>\r\n                                <div\r\n                                    className={styles.accordionTitle}\r\n                                    onClick={() => toggleSection(index)}\r\n                                >\r\n                                    {section.title}\r\n                                </div>\r\n                                <div\r\n                                    className={`${styles.accordionContent} ${openSections.includes(index) ? styles.open : \"\"}`}\r\n                                >\r\n                                    <ul>\r\n                                        {data.length > 0 ? (\r\n                                            data.map((item, i) => (\r\n                                                <li key={i}>\r\n                                                    <div>\r\n                                                        <div>\r\n                                                            <strong>{item.ngo_name || item.username || item.name || item.tag || item.action_details + \" on \" + item.action_date || \"Unnamed\"}</strong>\r\n                                                        </div>\r\n                                                        {index === 4 && (\r\n                                                            <div>{\"NGO (id) affected:\" + item.ngo_id}</div>)}\r\n\r\n                                                        <div\r\n                                                            style={{\r\n                                                                fontSize: '0.85rem',\r\n                                                                fontWeight: 'bold',\r\n                                                                color: item.status === 'active' ? 'green' : 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            {item.status || \"\"}\r\n                                                        </div>\r\n                                                    </div>\r\n                                                    <div>\r\n                                                        <span>{item.amount != null ? `${item.amount} â‚¬` : ''}</span>\r\n                                                        {index === 4 && (\r\n                                                            <div className={styles.adminDisplay}>\r\n                                                                {<>\r\n                                                                    <div>\r\n                                                                        {\"Admin (id): \" + item.admin_id}\r\n                                                                    </div>\r\n                                                                    <div>\r\n                                                                        {\"Action id: \" + item.action_id}\r\n                                                                    </div>\r\n                                                                </>}\r\n                                                            </div>)}\r\n                                                        {/* Only show toggle button in subscriptions (index 0) */}\r\n                                                        {index === 0 && (\r\n                                                            <button className={styles.itemButton}\r\n                                                                    onClick={() => handleStatusChange(item.subscription_id, item.status, item.ngo_id)}\r\n                                                            >\r\n                                                                {item.status === 'active' ? 'Cancel' : 'Activate'}\r\n                                                            </button>\r\n                                                        )}\r\n                                                        {/* Only show report donation in donations (index 1) */}\r\n                                                        {index === 1 && (\r\n                                                            <button className={styles.itemButton}\r\n                                                                    onClick={() => handleReportDonation(item.subscription_id, item.status)}\r\n                                                            >\r\n                                                                {'Report'}\r\n                                                            </button>\r\n                                                        )}\r\n                                                        {/* Only show redirect to verification (index 2) */}\r\n                                                        {index === 2 && (\r\n                                                            <button className={styles.itemButton}\r\n                                                                    onClick={() => handleRedirectVerification(item.ngo_id)}\r\n                                                            >\r\n                                                                {'To verification'}\r\n                                                            </button>\r\n                                                        )}\r\n                                                        {/* Only show remove tag to verification (index 3) */}\r\n                                                        {index === 3 && (\r\n                                                            <button className={styles.itemButton}\r\n                                                                    onClick={() => handleRemoveTag(item.tag_id, item.tag)}\r\n                                                            >\r\n                                                                {'Remove'}\r\n                                                            </button>\r\n                                                        )}\r\n                                                    </div>\r\n                                                </li>\r\n                                            ))\r\n                                        ) : (\r\n                                            <li>Nothing yet</li>\r\n                                        )}\r\n                                    </ul>\r\n                                </div>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n\r\n            <footer></footer>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Admin;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}