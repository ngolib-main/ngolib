// Entry point of the Express Application.
// Here the application itself is created, the routes are defined and where the
// server listens to incoming requests.

// NOTE: Code partially generated by AI.

require("dotenv").config({ path: require("path").resolve(__dirname, ".env") });

const express = require("express");
const path    = require("path");
const cors = require("cors");       // Cross-Origin Resource Sharing: Allows frontend (React) to make requests to backend (Express) even though they're on different ports (React -> 3000, Express -> 5000)
const session = require("express-session");

//Additions after submission due to addbot scanning safety concerns
//----------------------------------------------------------------
const helmet = require("helmet");
const rateLimit = require("express-rate-limit");
const mysql = require("mysql2/promise");
//----------------------------------------------------------------

const searchRoutes = require('./routes/searchRoutes');
const profileRoutes = require("./routes/profileRoutes");
const authRoutes = require("./routes/authRoutes");   // Imports routes
const opportunityRoutes = require("./routes/opportunityRoutes");   // Imports routes
const adminRoutes = require("./routes/adminRoutes");
const contactRoutes = require("./routes/contactRoutes");


// Added to troubleshoot SESSCION_SECRET loading while testing
if (!process.env.SESSION_SECRET) {
    throw new Error("SESSION_SECRET is not defined in environment variables.");
}

const app = express();                              // Create an Express application
// This middleware is needed to track logged-in users via cookies

//Additions after submission due to addbot scanning safety concerns
//----------------------------------------------------------------
// Security middlewares
app.use(helmet());

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  standardHeaders: true,
  legacyHeaders: false,
});
app.use(limiter);
//----------------------------------------------------------------

// Session middleware
app.use(session({
    name: "sid",
    secret: process.env.SESSION_SECRET, // Replace with a strong secret in production!
    // Run the command below in your terminal and put the result in your environmental variable SESSION_SECRET
    // node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
    resave: false,
    saveUninitialized: false,
    cookie: {
        secure: false,         // Set to true if using HTTPS
        httpOnly: true,
        sameSite: "lax"        // 'lax' is okay for dev. Use 'none' + secure: true if using HTTPS.
    }
}));


// Middlewares
// CORS connects the frontend with the backend.
app.use(cors({
    origin: "http://localhost:3000", // Allow requests from your React frontend
    methods: "GET, POST,DELETE",            // Specify allowed methods
    allowedHeaders: "Content-Type",  // Specify allowed headers
    // The line below "tells" the browser that the backend allows request from this origin,
    // and that cookies are OK.
    credentials: true                // Allow cookies to be sent
}));

// Middleware to parse JSON body from requests
app.use(express.json({ limit: "10mb" }));
app.use(express.urlencoded({ limit: "10mb", extended: true }));

// Log incoming requests
app.use((req, res, next) => {
    console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
    next();
});

// API Routes
app.use("/api/auth", authRoutes);
app.use('/api', searchRoutes);
app.use("/api", profileRoutes);
app.use("/api", opportunityRoutes);
app.use("/api/admin", adminRoutes);
app.use("/api/contact", contactRoutes);


// Ignore .well-known path so nginx can handle it
app.use("/.well-known", (req, res, next) => {
  res.status(404).end();
});


const buildPath = path.resolve(__dirname,  "../../build");
app.use(express.static(buildPath));

app.get(/^(?!\/api\/).*/, (req, res) => {
    res.sendFile(path.join(buildPath, "index.html"));
});


// Global error handler
app.use((err, req, res, next) => {
    console.error("❌ Server Error:", err.stack);
    res.status(500).json({ message: "Internal Server Error", error: err.message });
});

// From GET to POST
app.post('/admin/verify-NGOs', (req, res) => {
    const { ngo_id } = req.body;
    // Store ngo_id in session
    req.session.verification_ngo_id = ngo_id;
    // Redirect to the page
    res.redirect('/admin/verify-NGOs');
});


// Start the server
 // Only start server if this file is run directly
// In contrast to the old (above) method to start it, the server itself only will be started when running
// node server.js and not in testing.
if (require.main === module) {
    const PORT = process.env.PORT || 5000;
    app.listen(PORT, () => console.log(`✅ Server running on port ${PORT}`));
}

// Exports the app so if can be tested with Jest/Supertest
module.exports = app;
