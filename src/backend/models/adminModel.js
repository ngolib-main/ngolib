// NOTE: Code partially generated by AI.

const db = require("../config/db");       // Include the db configuration file

// Function to fetch the admin ID of a user
// This function is called from the admin dashboard to display the admin ID of a user
// The function takes the following parameters:
// - id: The user ID of the user whose admin ID is to be fetched
// The function returns a promise that resolves to the admin ID of the user, or rejects with an error if the user is not found
const fetchAdminId = async (id) => {
    return new Promise((resolve, reject) => {
        try {
            if (!id) {
                return reject(new Error("User ID is required"));
            }

            const query = "SELECT admin_id FROM admin WHERE user_id = ?";

            db.query(query, [id], (err, results) => {
                if (err) {
                    //console.error("Error fetching admin ID:", err);
                    return reject(err);
                }

                if (results.length === 0) {
                    return reject(new Error("No admin found with the provided user ID"));
                }

                resolve(results[0].admin_id);
            });
        } catch (error) {
            //console.error("Exception in fetchAdminId:", error);
            reject(error);
        }
    });
};


// Function to fetch all subscriptions
// This function is called from the admin dashboard to display all subscriptions
// The function returns a promise that resolves to an array of subscriptions
const fetchAllSubscriptions = () => {
    return new Promise((resolve, reject) => {
        const query = "SELECT n.name AS ngo_name, n.ngo_id, s.subscription_id, s.user_id, s.status, s.amount FROM subscriptions AS s JOIN ngo AS n ON s.ngo_id = n.ngo_id WHERE s.user_id IN (SELECT user_id FROM users);"
        db.query(query, (err, result) => {
            if (err) {
                return reject(err)
            }
            if (result.length === 0) {
                return resolve(null)
            }
            resolve(result)
        });
    });
}

// Function to fetch all donations
// This function is called from the admin dashboard to display all donations
// The function returns a promise that resolves to an array of donations
const fetchAllDonations = () => {
    return new Promise((resolve, reject) => {
        const query = "SELECT n.name AS ngo_name, n.ngo_id, d.user_id, d.amount FROM donations AS d JOIN ngo AS n ON d.ngo_id = n.ngo_id WHERE d.user_id IN (select user_id from users);"
        db.query(query, (err, result) => {
            if (err) {
                return reject(err)
            }
            if (result.length === 0) {
                return resolve(null)
            }
            resolve(result)
        });
    });
}

// Function to fetch all admin actions
// This function is called from the admin dashboard to display all admin actions
// The function returns a promise that resolves to an array of admin actions
const fetchAllAdminActions = () => {
    return new Promise((resolve, reject) => {
        const query = "SELECT * FROM admin_actions;"
        db.query(query, (err, result) => {
            if (err) {
                return reject(err)
            }
            if (result.length === 0) {
                return resolve(null)
            }
            resolve(result)
        })
    })
}

// Function to update the status of a subscription
// This function is called from the admin dashboard to update the status of a subscription
// The function takes the following parameters:
// - req: The request object containing the subscription_id and status
// - res: The response object to return the result of the operation
// The function returns a promise that resolves to the result of the operation
const updateSubscriptionStatus = async (req, res) => {
    const {id} = req.params;
    const {status} = req.body;
    try {
        const result = await db.promise().query("UPDATE subscriptions SET status = ? WHERE subscription_id = ?", [status, id]);
        if (result.affectedRows === 0) {
            return res.status(404).json({message: "Subscription not found"});
        }
        res.json({message: "Subscription status updated"});
    } catch (err) {
        res.status(500).json({message: "Error updating status", error: err});
    }
}

// Function to fetch all NGOs that have not yet been verified by admins
// This function is called from the admin dashboard to display all NGOs that need to be verified
// The function returns a promise that resolves to an array of NGOs that need to be verified
const fetchPendingVerifications = () => {
    return new Promise((resolve, reject) => {
        try {
            const query = "SELECT * FROM ngo WHERE verified = 0;";
            db.query(query, (err, result) => {
                if (err) {
                    return reject(err);
                }
                if (result.length === 0) {
                    return resolve(null);
                }
                resolve(result); // This was missing in the original function
            });
        } catch (error) {
            reject(error);
        }
    });
};

// Function to add an admin action to the admin_actions table
// This function is called from the admin dashboard to record actions taken by admins
// The function takes the following parameters:
// - req: The request object containing the ngo_id, admin_id, action_type, and action_details
// - res: The response object to return the result of the operation
// The function returns a promise that resolves to the result of the operation
const addAdminAction = async (req, res) => {
    try {
        const {ngo_id, admin_id, action_type, action_details} = req.body;
        console.log(req.body);
        // Validate required fields
        if (!admin_id || !action_type || !action_details) {
            return res.status(400).json({
                success: false,
                message: "Missing required fields. Please provide ngo_id, admin_id, action_type, and action_details"
            });
        }

        const query = "INSERT INTO admin_actions (ngo_id, admin_id, action_type, action_details) VALUES (?, ?, ?, ?)";
        const values = [ngo_id, admin_id, action_type, action_details];

        db.query(query, values, (err, result) => {
            if (err) {
                console.error("Error adding admin action:", err);
                return res.status(500).json({
                    success: false,
                    message: "Failed to record admin action",
                    error: err.message
                });
            }

            return res.status(201).json({
                success: true,
                message: "Admin action recorded successfully",
                actionId: result.insertId
            });
        });
    } catch (error) {
        console.error("Exception in addAdminAction:", error);
        return res.status(500).json({
            success: false,
            message: "Server error while processing request",
            error: error.message
        });
    }
};

// Export it all, baby!
module.exports = {
    fetchAdminId,
    fetchAllSubscriptions,
    fetchAllDonations,
    fetchAllAdminActions,
    updateSubscriptionStatus,
    fetchPendingVerifications,
    addAdminAction
};
